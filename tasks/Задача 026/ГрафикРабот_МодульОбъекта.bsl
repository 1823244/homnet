// Назначение: Модуль объекта внешней обработки "График работ"
// Параметры: Нет
// Примечания: Содержит основные методы для работы с графиком работ

#Область ПрограммныйИнтерфейс

// Назначение: Получить версию обработки
// Параметры: Нет
// Возвращаемое: Строка – версия обработки
Функция ПолучитьВерсию() Экспорт
	
	// initialization
	ВерсияОбработки = "1.0.0";
	
	// result_formation
	Возврат ВерсияОбработки;
	
КонецФункции

// Назначение: Получить информацию об обработке
// Параметры: Нет
// Возвращаемое: Структура – информация об обработке
Функция ПолучитьИнформацию() Экспорт
	
	// initialization
	Информация = Новый Структура;
	Информация.Вставить("Наименование", "График работ");
	Информация.Вставить("Версия", ПолучитьВерсию());
	Информация.Вставить("Автор", "1С Разработка");
	Информация.Вставить("Описание", "Обработка для работы с графиком работ на основе таблицы ГР_12.02_2025");
	Информация.Вставить("ДатаСоздания", Дата(2025, 09, 18));
	
	// result_formation
	Возврат Информация;
	
КонецФункции

// Назначение: Экспортировать данные табличного документа в Excel
// Параметры: ПутьКФайлу – Строка – путь для сохранения файла; ВыводитьСообщения – Булево – выводить диагностические сообщения
// Возвращаемое: Булево – успешность операции
// Примечания: Сохраняет табличный документ в формате Excel
Функция ЭкспортироватьВExcel(Знач ПутьКФайлу, Знач ВыводитьСообщения = Ложь) Экспорт
	
	// operation_start
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало экспорта данных в Excel</operation_start>");
	КонецЕсли;
	
	Попытка
		
		// document_creation
		ТабличныйДокумент = СоздатьТабличныйДокумент(ВыводитьСообщения);
		
		// file_export
		Если ВыводитьСообщения Тогда
			Сообщить("<file_export>Сохранение файла: " + ПутьКФайлу + "</file_export>");
		КонецЕсли;
		
		ТабличныйДокумент.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLSX);
		
		// operation_end
		Если ВыводитьСообщения Тогда
			Сообщить("<operation_end>Файл успешно экспортирован</operation_end>");
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		// error_handling
		ТекстОшибки = ОписаниеОшибки();
		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка экспорта в Excel: " + ТекстОшибки + "</error_details>");
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Назначение: Получить структуру данных для внешнего использования
// Параметры: ВыводитьСообщения – Булево – выводить диагностические сообщения
// Возвращаемое: Структура – данные графика работ
// Примечания: Возвращает данные в формате для обмена с внешними системами
Функция ПолучитьДанныеДляОбмена(Знач ВыводитьСообщения = Ложь) Экспорт
	
	// initialization
	Если ВыводитьСообщения Тогда
		Сообщить("<initialization>Подготовка данных для обмена</initialization>");
	КонецЕсли;
	
	// data_structure_formation
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Наименование", "График работ");
	СтруктураДанных.Вставить("ДатаСоздания", ТекущаяДатаСеанса());
	СтруктураДанных.Вставить("Версия", ПолучитьВерсию());
	СтруктураДанных.Вставить("Данные", ПолучитьДанныеДляЗаполнения());
	
	// result_formation
	Если ВыводитьСообщения Тогда
		Сообщить("<result_formation>Данные для обмена подготовлены</result_formation>");
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Назначение: Создать табличный документ на основе макета графика работ
// Параметры: ВыводитьСообщения – Булево – выводить диагностические сообщения
// Возвращаемое: ТабличныйДокумент – созданный документ
// Примечания: Основной метод для формирования отчета
Функция СоздатьТабличныйДокумент(Знач ВыводитьСообщения = Ложь) Экспорт
	
	// operation_start
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания табличного документа на основе макета</operation_start>");
	КонецЕсли;
	
	// initialization
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		
		// template_processing
		Если ВыводитьСообщения Тогда
			Сообщить("<template_processing>Получение макета ШаблонГрафикаРабот</template_processing>");
		КонецЕсли;
		
		Макет = ПолучитьМакет("ШаблонГрафикаРабот");
		
		// header_formation
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// data_processing
		Если ВыводитьСообщения Тогда
			Сообщить("<data_processing>Заполнение данных в табличный документ</data_processing>");
		КонецЕсли;
		
		ЗаполнитьДанныеВТабличныйДокумент(ТабличныйДокумент, Макет, ВыводитьСообщения);
		
		// operation_end
		Если ВыводитьСообщения Тогда
			Сообщить("<operation_end>Табличный документ успешно создан</operation_end>");
		КонецЕсли;
		
	Исключение
		
		// error_handling
		ТекстОшибки = ОписаниеОшибки();
		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка создания табличного документа: " + ТекстОшибки + "</error_details>");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	// result_formation
	Возврат ТабличныйДокумент;
	
КонецФункции

// Назначение: Заполнить данные в табличный документ
// Параметры: ТабличныйДокумент – ТабличныйДокумент – документ для заполнения; Макет – МакетТабличногоДокумента – макет для вывода; ВыводитьСообщения – Булево – выводить диагностические сообщения
// Примечания: Заполняет данные из предустановленного набора строк
Процедура ЗаполнитьДанныеВТабличныйДокумент(ТабличныйДокумент, Макет, Знач ВыводитьСообщения = Ложь) Экспорт
	
	// initialization
	Если ВыводитьСообщения Тогда
		Сообщить("<initialization>Подготовка данных для заполнения</initialization>");
	КонецЕсли;
	
	// data_preparation
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполнения();
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Количество строк для заполнения: " + ДанныеДляЗаполнения.Количество() + "</data_summary>");
	КонецЕсли;
	
	// loop_processing
	Для Каждого СтрокаДанных Из ДанныеДляЗаполнения Цикл
		
		// row_processing
		Если ВыводитьСообщения Тогда
			Сообщить("<row_processing>Обработка строки: " + СтрокаДанных.НаименованиеПоказателя + "</row_processing>");
		КонецЕсли;
		
		ДобавитьСтрокуВТабличныйДокумент(ТабличныйДокумент, Макет, СтрокаДанных);
		
	КонецЦикла;
	
	// result_formation
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Заполнение данных завершено</operation_end>");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Назначение: Получить тестовые данные для заполнения таблицы
// Параметры: Нет
// Возвращаемое: Массив – массив структур с данными
// Примечания: Возвращает предустановленный набор данных на основе исходной таблицы
Функция ПолучитьДанныеДляЗаполнения()
	
	// initialization
	ДанныеДляЗаполнения = Новый Массив;
	
	// data_formation
	// Строка 1: Всего часов для процедуры принятия раствора на объекте 
	СтрокаДанных = Новый Структура;
	СтрокаДанных.Вставить("НомерСтроки", 1);
	СтрокаДанных.Вставить("НаименованиеПоказателя", "Всего часов для процедуры принятия раствора на объекте от ________ 20__ г., в том числе:");
	СтрокаДанных.Вставить("ВсегоЧасов", "");
	СтрокаДанных.Вставить("Период1", "");
	СтрокаДанных.Вставить("Период2", "");
	СтрокаДанных.Вставить("Период3", "");
	СтрокаДанных.Вставить("ЧасыПоПериодам", "");
	СтрокаДанных.Вставить("Итого", "");
	ДанныеДляЗаполнения.Добавить(СтрокаДанных);
	
	// Строка 2: Внутренний технологический контроль
	СтрокаДанных = Новый Структура;
	СтрокаДанных.Вставить("НомерСтроки", 2);
	СтрокаДанных.Вставить("НаименованиеПоказателя", "Внутренний технологический контроль");
	СтрокаДанных.Вставить("ВсегоЧасов", "");
	СтрокаДанных.Вставить("Период1", "");
	СтрокаДанных.Вставить("Период2", "");
	СтрокаДанных.Вставить("Период3", "");
	СтрокаДанных.Вставить("ЧасыПоПериодам", "");
	СтрокаДанных.Вставить("Итого", "");
	ДанныеДляЗаполнения.Добавить(СтрокаДанных);
	
	// Строка 3: Авторский надзор
	СтрокаДанных = Новый Структура;
	СтрокаДанных.Вставить("НомерСтроки", 3);
	СтрокаДанных.Вставить("НаименованиеПоказателя", "Авторский надзор");
	СтрокаДанных.Вставить("ВсегоЧасов", "");
	СтрокаДанных.Вставить("Период1", "");
	СтрокаДанных.Вставить("Период2", "");
	СтрокаДанных.Вставить("Период3", "");
	СтрокаДанных.Вставить("ЧасыПоПериодам", "");
	СтрокаДанных.Вставить("Итого", "");
	ДанныеДляЗаполнения.Добавить(СтрокаДанных);
	
	// Строка 4: Технический надзор
	СтрокаДанных = Новый Структура;
	СтрокаДанных.Вставить("НомерСтроки", 4);
	СтрокаДанных.Вставить("НаименованиеПоказателя", "Технический надзор");
	СтрокаДанных.Вставить("ВсегоЧасов", "");
	СтрокаДанных.Вставить("Период1", "");
	СтрокаДанных.Вставить("Период2", "");
	СтрокаДанных.Вставить("Период3", "");
	СтрокаДанных.Вставить("ЧасыПоПериодам", "");
	СтрокаДанных.Вставить("Итого", "");
	ДанныеДляЗаполнения.Добавить(СтрокаДанных);
	
	// Строка 5: Строительный контроль
	СтрокаДанных = Новый Структура;
	СтрокаДанных.Вставить("НомерСтроки", 5);
	СтрокаДанных.Вставить("НаименованиеПоказателя", "Строительный контроль");
	СтрокаДанных.Вставить("ВсегоЧасов", "");
	СтрокаДанных.Вставить("Период1", "");
	СтрокаДанных.Вставить("Период2", "");
	СтрокаДанных.Вставить("Период3", "");
	СтрокаДанных.Вставить("ЧасыПоПериодам", "");
	СтрокаДанных.Вставить("Итого", "");
	ДанныеДляЗаполнения.Добавить(СтрокаДанных);
	
	// result_formation
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

// Назначение: Добавить строку данных в табличный документ
// Параметры: ТабличныйДокумент – ТабличныйДокумент – документ для заполнения; Макет – МакетТабличногоДокумента – макет для вывода; СтрокаДанных – Структура – данные строки
// Примечания: Добавляет одну строку в табличный документ используя область макета
Процедура ДобавитьСтрокуВТабличныйДокумент(ТабличныйДокумент, Макет, СтрокаДанных)
	
	// template_area_processing
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаДанных");
	
	// parameter_filling
	ОбластьСтрока.Параметры.НомерСтроки = СтрокаДанных.НомерСтроки;
	ОбластьСтрока.Параметры.НаименованиеПоказателя = СтрокаДанных.НаименованиеПоказателя;
	ОбластьСтрока.Параметры.ВсегоЧасов = СтрокаДанных.ВсегоЧасов;
	ОбластьСтрока.Параметры.Период1 = СтрокаДанных.Период1;
	ОбластьСтрока.Параметры.Период2 = СтрокаДанных.Период2;
	ОбластьСтрока.Параметры.Период3 = СтрокаДанных.Период3;
	ОбластьСтрока.Параметры.ЧасыПоПериодам = СтрокаДанных.ЧасыПоПериодам;
	ОбластьСтрока.Параметры.Итого = СтрокаДанных.Итого;
	
	// row_output
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
КонецПроцедуры

#КонецОбласти
