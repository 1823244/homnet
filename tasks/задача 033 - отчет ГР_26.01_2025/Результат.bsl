// Отчет ГР_26.01_2025
// Кредиторская задолженность, оцениваемая по амортизированной стоимости

Перем ИмяГруппы;
Перем мДатаОстатка;
Перем мСтруктураПараметров;
Перем мВыводитьСообщения;
Перем мЗначениеПоказателя;
Перем мРежимТестирования;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.9");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Отчет26012025");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Отчет 26.01_2025");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);

	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
		"Открыть форму : Отчет 26.01_2025",
		"Форма_Отчет26012025",
		ТипКоманды,
		Ложь) ;
		
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
		"Создать (обновить) показатели",
		"СоздатьОбновитьПоказатели",
		ТипКоманды,
		Ложь) ;

	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "СоздатьОбновитьПоказатели" Тогда
		СоздатьОбновитьПоказатели(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПоказателей

// Назначение: Основная процедура запуска создания всех показателей отчета ГР_26.01_2025
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений;
//            РежимТестирования – Булево – Режим тестирования (используются тестовые данные)
// Операции с БД: Создание группы показателей, массовое создание элементов справочника
// Валидация: Проверка существования группы и показателей
Процедура СоздатьОбновитьПоказатели(Знач ВыводитьСообщения = Истина, Знач РежимТестирования = Ложь) Экспорт

	#region initialization
	
	Если ВыводитьСообщения Тогда
		Если РежимТестирования Тогда
			Сообщить("<operation_start>Начало создания показателей отчета ГР_26.01_2025 (РЕЖИМ ТЕСТИРОВАНИЯ)</operation_start>");
		Иначе
			Сообщить("<operation_start>Начало создания показателей отчета ГР_26.01_2025</operation_start>");
		КонецЕсли;
	КонецЕсли;
	
	#endregion
	
	#region group_preparation
	
	СоздатьГруппуПоказателей(ВыводитьСообщения);
	ПометитьВсеПоказателиНаУдаление(ВыводитьСообщения);
	
	#endregion
	
	#region counterparty_lists_initialization
	
	Если РежимТестирования Тогда
		// Инициализация тестовых данных (банковские счета вместо контрагентов)
		ИнициализироватьТестовыеДанные(ВыводитьСообщения);
	Иначе
		// Инициализация списков контрагентов в справочнике (первый запуск)
		// ВАЖНО: Перед запуском замените ИНН и КПП на реальные значения!
		// ИнициализироватьСпискиКонтрагентовВСправочнике();
	КонецЕсли;
	
	#endregion

	СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор(РежимТестирования);

	СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор(РежимТестирования);

	#region operation_completion
	
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание показателей отчета ГР_26.01_2025</operation_end>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание группы показателей
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание элемента справочника-группы
// Валидация: Проверка существования группы перед созданием
Процедура СоздатьГруппуПоказателей(Знач ВыводитьСообщения = Ложь)

	#region initialization
	
	Идентификатор = ИмяГруппы;
	НаименованиеГруппы = ИмяГруппы;
	
	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеГруппы, Истина);
	
	#endregion
	
	#region group_creation
	
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		ГруппаОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьГруппу();
		ГруппаОбъект.Идентификатор = Идентификатор;
		ГруппаОбъект.Наименование = НаименованиеГруппы;
		ГруппаОбъект.Записать();
		
		Если ВыводитьСообщения Тогда
			Сообщить("<data_summary>Создана группа показателей: " + НаименованиеГруппы + "</data_summary>");
		КонецЕсли;
		
	Иначе
		
		Если ВыводитьСообщения Тогда
			Сообщить("<validation_result>Группа показателей уже существует: " + НаименованиеГруппы + "</validation_result>");
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Пометка всех показателей группы на удаление
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Обновление пометки удаления элементов справочника
// Производительность: Пакетная обработка через запрос
Процедура ПометитьВсеПоказателиНаУдаление(Знач ВыводитьСообщения = Ложь)

	#region initialization

	#endregion
	
	#region database_query
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	хн_нфо_ПоказателиОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.хн_нфо_ПоказателиОтчета КАК хн_нфо_ПоказателиОтчета
	|ГДЕ
	|	хн_нфо_ПоказателиОтчета.Родитель = &Родитель
	|	И НЕ хн_нфо_ПоказателиОтчета.ПометкаУдаления";
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		ВызватьИсключение "Группа не найдена: " + ИмяГруппы;
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель", ГруппаСсылка);
	
	Результат = Запрос.Выполнить();
	
	#endregion
	
	#region loop_processing
	
	КоличествоПомеченных = 0;
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ПометкаУдаления = Истина;
		ПоказательОбъект.Записать();
		КоличествоПомеченных = КоличествоПомеченных + 1;
		
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Помечено на удаление показателей: " + КоличествоПомеченных + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание или обновление показателя в справочнике
// Параметры: Идентификатор – Строка – Уникальный идентификатор показателя;
//            НаименованиеПоказателя – Строка – Наименование показателя;
//            ВидПоказателя – ПеречислениеСсылка.хн_нфо_ВидыПоказателейОтчета – Вид показателя;
//            ТипПоказателяОтчета – ПеречислениеСсылка.хн_нфо_ТипПоказателяОтчета – Тип показателя;
//            ОписаниеПоказателя – Строка – Описание показателя;
//            СписокИспользуемыхПоказателей – Строка – Список показателей через запятую;
//            ЗначениеОтбора – Произвольный – Значение отбора;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений;
//            ТекстКода – Строка – Текст программного кода;
//            Формула – Строка – Формула расчета;
//            Множитель – Число – Множитель для расчета
// Операции с БД: Создание или обновление элемента справочника показателей
Процедура СоздатьИлиОбновитьПоказатель(
	Идентификатор,
	НаименованиеПоказателя,
	ВидПоказателя,
	ТипПоказателяОтчета,
	ОписаниеПоказателя,
	СписокИспользуемыхПоказателей = "",
	ЗначениеОтбора = Неопределено,
	Знач ВыводитьСообщения = Ложь,
	ТекстКода = "",
	Формула = "",
	Множитель = 1)
	
	#region initialization

	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка: Группа " + ИмяГруппы + " не найдена</error_details>");
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ПоказательСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеПоказателя, Истина);
	
	#endregion
	
	#region indicator_creation
	
	Если НЕ ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ПоказательОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьЭлемент();
	Иначе
		ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	ПоказательОбъект.Наименование = НаименованиеПоказателя;
	ПоказательОбъект.Родитель = ГруппаСсылка;

	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	ПоказательОбъект.Формула = Формула;
	ПоказательОбъект.ОписаниеПоказателя = ОписаниеПоказателя;
	ПоказательОбъект.НеВыводитьВОтчет = Ложь;
	ПоказательОбъект.ТекстКода = ТекстКода;
	ПоказательОбъект.Множитель = Множитель;
	ПоказательОбъект.ВалютаПоказателя = Undefined;
	
	ПоказательОбъект.ФорматДаты = "";
	ПоказательОбъект.ТипРегистратора = "";
	ПоказательОбъект.ТипПоказателяОтчета = ТипПоказателяОтчета;
	
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле Тогда
		
		ПоказательОбъект.Регистр = "";
		ПоказательОбъект.Ресурс = "";
		ПоказательОбъект.ТипПоказателя = 1;
		
	Иначе
		
		ПоказательОбъект.ТипПоказателя = 0;
		ПоказательОбъект.Регистр = "Хозрасчетный";
		
		Если ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало Тогда
			ПоказательОбъект.Ресурс = "СуммаНачальныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец Тогда
			ПоказательОбъект.Ресурс = "СуммаКонечныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод Тогда
			ПоказательОбъект.Ресурс = "СуммаОборот";
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion
	
	#region tabular_section_processing
	
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле
		И НЕ ПустаяСтрока(СписокИспользуемыхПоказателей) Тогда
		
		ПоказательОбъект.ИспользуемыеПоказатели.Очистить();
		
		МассивИмен = СтрРазделить(СписокИспользуемыхПоказателей, ",", Ложь);
		Для Каждого ИмяИспользуемого Из МассивИмен Цикл
			
			ИмяИспользуемого = СокрЛП(ИмяИспользуемого);
			ИспользуемыйПоказатель = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяИспользуемого, Истина);
			
			Если ЗначениеЗаполнено(ИспользуемыйПоказатель) Тогда
				
				НоваяСтрока = ПоказательОбъект.ИспользуемыеПоказатели.Добавить();
				НоваяСтрока.Показатель = ИспользуемыйПоказатель;
				НоваяСтрока.Множитель = Множитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#endregion
	
	#region database_write
	
	ПоказательОбъект.ПометкаУдаления = Ложь;
	ПоказательОбъект.Записать();
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Создан/обновлен показатель: " + НаименованиеПоказателя + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

#Область СозданиеДетальныхПоказателей

// Назначение: Формирование текста программного кода для детального показателя
// Параметры: НомерСтроки – Число – Номер строки в отчете; 
//            НомерКолонки – Число – Номер колонки в отчете;
//            РежимТестирования – Булево – Режим тестирования
// Возвращаемое: Строка – Текст программного кода
Функция ТекстКодаДетальногоПоказателя(НомерСтроки, НомерКолонки, РежимТестирования = Ложь)

	РежимТестированияСтрока = ?(РежимТестирования, "Истина", "Ложь");
	
	// Определяем формулу для вычисления даты в зависимости от колонки
	Если НомерКолонки = 3 Тогда
		// Колонка 3 - на 31 декабря предыдущего года
		ФормулаДаты = "КонецГода(НачалоГода(мДатаОстатка) - 1)";
	ИначеЕсли НомерКолонки = 4 Тогда
		// Колонка 4 - на конец периода
		ФормулаДаты = "КонецДня(мДатаОстатка)";
	Иначе
		// По умолчанию - конец периода
		ФормулаДаты = "КонецДня(мДатаОстатка)";
	КонецЕсли;
	
	т = "
	|СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки
	|	.НайтиПоНаименованию(""Отчет_ГР_26_01_2025"", Истина);
    |ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаОбработчика);
	|ДатаОстатка = " + ФормулаДаты + ";
	|ЗначениеПоказателя = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработчика)
	|	.ВычислитьПоказатель(" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "," + Формат(НомерКолонки, "ЧГ=;ЧРГ=") + ", ДатаОстатка, СтруктураПараметров, Истина, " + РежимТестированияСтрока + ");
	|";
	
	Возврат т;
	
КонецФункции

// Назначение: Добавление детальных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями;
//            РежимТестирования – Булево – Режим тестирования (для совместимости, не используется)
Процедура ДобавитьДетальныеПоказателиВТЗ(ТЗ, Знач РежимТестирования = Ложь)
	
	// Колонка 3 - 31 декабря предыдущего года
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 3;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 10;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 19;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 20;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	// Колонка 4 - отчетная дата текущего года
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 3;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 10;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 19;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 20;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

КонецПроцедуры

// Назначение: Создание детальных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей;
//            РежимТестирования – Булево – Режим тестирования
Процедура СоздатьДетальныеПоказателиИзТЗ(ТЗ, Знач РежимТестирования = Ложь)
	
	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		стрк = ТЗ[Счетчик];
				
		Идентификатор = "ГР_26_01_2025_стр" + Формат(стрк.НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(стрк.НомерКолонки, "ЧГ=;ЧРГ=");
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке,
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			"",
			Неопределено,
			Истина,
			ТекстКодаДетальногоПоказателя(стрк.НомерСтроки, стрк.НомерКолонки, РежимТестирования),
			"",
			1
			);
		
	КонецЦикла;
	
КонецПроцедуры

// Назначение: Оркестратор создания всех детальных показателей
Процедура СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор(Знач РежимТестирования = Ложь)
	
	ТЗ = ПустаяТЗПоказателей();
	ДобавитьДетальныеПоказателиВТЗ(ТЗ, РежимТестирования);
	СоздатьДетальныеПоказателиИзТЗ(ТЗ, РежимТестирования);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеГРУППИРОВОЧНЫХпоказателей

// Назначение: Оркестратор создания всех группировочных показателей
Процедура СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор(Знач РежимТестирования = Ложь)
	
	ТЗ = ПустаяТЗПоказателей();
	Добавить_Группировочные_Показатели_в_ТЗ(ТЗ, РежимТестирования);
	СоздатьГруппировочныеПоказателиИзТЗ(ТЗ, РежимТестирования);
	
КонецПроцедуры

// Назначение: Создание группировочных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей;
//            РежимТестирования – Булево – Режим тестирования (для совместимости, не используется)
Процедура СоздатьГруппировочныеПоказателиИзТЗ(ТЗ, Знач РежимТестирования = Ложь)

	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		стрк = ТЗ[Счетчик];
				
		Идентификатор = ид(стрк.НомерСтроки, стрк.НомерКолонки);
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			стрк.СписокИспользуемыхПоказателей,
			Неопределено,
			Истина,
			"",
			"",
			1
			);
		
	КонецЦикла

КонецПроцедуры

// Назначение: Добавление группировочных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями;
//            РежимТестирования – Булево – Режим тестирования (для совместимости, не используется)
Процедура Добавить_Группировочные_Показатели_в_ТЗ(ТЗ, Знач РежимТестирования = Ложь)
	
	// Строка 21 - Итого (колонка 3)
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_26_01_2025_стр1кол3,ГР_26_01_2025_стр2кол3,ГР_26_01_2025_стр3кол3,ГР_26_01_2025_стр10кол3,ГР_26_01_2025_стр19кол3,ГР_26_01_2025_стр20кол3";
	
	// Строка 21 - Итого (колонка 4)
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_26_01_2025_стр1кол4,ГР_26_01_2025_стр2кол4,ГР_26_01_2025_стр3кол4,ГР_26_01_2025_стр10кол4,ГР_26_01_2025_стр19кол4,ГР_26_01_2025_стр20кол4";

КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииДляСозданияПоказателей

// Назначение: Формирование идентификатора показателя
// Параметры: стрк – Число – Номер строки; кол – Число – Номер колонки
// Возвращаемое: Строка – Идентификатор показателя
Функция ид(стрк, кол)
	
	Возврат "ГР_26_01_2025_стр" + Формат(стрк, "ЧГ=;ЧРГ=") + "кол" + Формат(кол, "ЧГ=;ЧРГ=");
	
КонецФункции

// Назначение: Создание пустой таблицы значений для показателей
// Возвращаемое: ТаблицаЗначений – Пустая таблица с колонками для показателей
Функция ПустаяТЗПоказателей()
			
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НомерКолонки");
	ТЗ.Колонки.Добавить("Идентификатор");
	ТЗ.Колонки.Добавить("НаименованиеПоказателя");
	ТЗ.Колонки.Добавить("ВидПоказателя");
	ТЗ.Колонки.Добавить("ТипПоказателяОтчета");
	ТЗ.Колонки.Добавить("ОписаниеПоказателя");
	ТЗ.Колонки.Добавить("СписокИспользуемыхПоказателей");
	ТЗ.Колонки.Добавить("ЗначениеОтбора");
	ТЗ.Колонки.Добавить("ТекстКода");
	ТЗ.Колонки.Добавить("Формула");
	ТЗ.Колонки.Добавить("Множитель");

	Возврат ТЗ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СистемаХраненияСписковКонтрагентов

// ВАРИАНТ 1: Хранение списков контрагентов в справочнике Показателей
// Списки хранятся в атрибуте ТекстКода в формате "ИНН;КПП;Наименование" (каждая строка - один контрагент)
// При использовании списков контрагенты ищутся по ИНН+КПП

// Назначение: Создание элемента-хранилища для списка контрагентов
// Параметры: ИдентификаторСписка – Строка – Уникальный идентификатор списка контрагентов;
//            НаименованиеСписка – Строка – Наименование для отображения;
//            ТекстСписка – Строка – Список контрагентов в формате "ИНН;КПП;Наименование" (каждый с новой строки)
// Операции с БД: Создание или обновление элемента справочника
// Примечание: Список хранится в атрибуте ТекстКода в виде многострочного текста
Процедура СохранитьСписокКонтрагентовВСправочник(ИдентификаторСписка, НаименованиеСписка, ТекстСписка) Экспорт

	#region initialization
	
	ПолноеИмя = "СПИСОК_КОНТРАГЕНТОВ_" + ИдентификаторСписка;
	
	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		ВызватьИсключение "Группа показателей не найдена: " + ИмяГруппы;
	КонецЕсли;
	
	ЭлементСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ПолноеИмя, Истина);
	
	#endregion
	
	#region element_creation
	
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ЭлементОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьЭлемент();
	Иначе
		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	ЭлементОбъект.Наименование = ПолноеИмя;
	ЭлементОбъект.Родитель = ГруппаСсылка;
	ЭлементОбъект.Идентификатор = ИдентификаторСписка;
	ЭлементОбъект.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;
	ЭлементОбъект.ОписаниеПоказателя = НаименованиеСписка;
	ЭлементОбъект.НеВыводитьВОтчет = Истина;
	ЭлементОбъект.ПометкаУдаления = Ложь;
	
	// Сохраняем список контрагентов в атрибут ТекстКода
	// Формат: каждая строка - "ИНН;КПП;Наименование"
	ЭлементОбъект.ТекстКода = ТекстСписка;
	
	#endregion
	
	#region database_write
	
	ЭлементОбъект.Записать();
	
	#endregion

КонецПроцедуры

// Назначение: Получение списка контрагентов из справочника
// Параметры: ИдентификаторСписка – Строка – Уникальный идентификатор списка контрагентов
// Возвращаемое: Массив – Массив ссылок на контрагентов
// Примечание: Читает список из атрибута ТекстКода и ищет контрагентов по ИНН+КПП
Функция ПолучитьСписокКонтрагентовИзСправочника(ИдентификаторСписка) Экспорт

	#region initialization
	
	МассивКонтрагентов = Новый Массив;
	ПолноеИмя = "СПИСОК_КОНТРАГЕНТОВ_" + ИдентификаторСписка;
	
	#endregion
	
	#region database_query
	
	ЭлементСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ПолноеИмя, Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат МассивКонтрагентов;
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	// Читаем текст списка из атрибута ТекстКода
	ТекстСписка = ЭлементСсылка.ТекстКода;
	
	Если ПустаяСтрока(ТекстСписка) Тогда
		Возврат МассивКонтрагентов;
	КонецЕсли;
	
	// Разбиваем текст на строки
	МассивСтрок = СтрРазделить(ТекстСписка, Символы.ПС, Ложь);
	
	Для Каждого СтрокаСписка Из МассивСтрок Цикл
		
		// Парсим строку вида "ИНН;КПП;Наименование"
		МассивЧастей = СтрРазделить(СтрокаСписка, ";", Ложь);
		
		Если МассивЧастей.Количество() >= 2 Тогда
			
			ИНН = СокрЛП(МассивЧастей[0]);
			КПП = СокрЛП(МассивЧастей[1]);
			
			// Ищем контрагента по ИНН+КПП
			Если НЕ ПустаяСтрока(ИНН) Тогда
				
				КонтрагентСсылка = НайтиКонтрагентаПоИННиКПП(ИНН, КПП);
				
				Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
					МассивКонтрагентов.Добавить(КонтрагентСсылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Возврат МассивКонтрагентов;
	
	#endregion

КонецФункции

// Назначение: Поиск контрагента по ИНН и КПП
// Параметры: ИНН – Строка – ИНН контрагента; КПП – Строка – КПП контрагента
// Возвращаемое: СправочникСсылка.Контрагенты – Найденный контрагент или ПустаяСсылка
Функция НайтиКонтрагентаПоИННиКПП(ИНН, КПП = "")

	#region initialization
	
	КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
	
	#endregion
	
	#region database_query
	
	Запрос = Новый Запрос;
	
	Если ПустаяСтрока(КПП) Тогда
		// Поиск только по ИНН (для ИП и физлиц)
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
	Иначе
		// Поиск по ИНН и КПП (для организаций)
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	#endregion
	
	#region data_processing
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			КонтрагентСсылка = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion
	
	#region result_formation
	
	Возврат КонтрагентСсылка;
	
	#endregion

КонецФункции

// Назначение: Инициализация всех списков контрагентов в справочнике
// Примечание: ИНН и КПП указаны как пример, необходимо заменить на реальные значения
// Формат хранения: в атрибуте ТекстКода каждая строка - "ИНН;КПП;Наименование"
Процедура ИнициализироватьСпискиКонтрагентовВСправочнике() Экспорт

	#region initialization
	
	#endregion
	
	#region data_processing
	
	// Строка 1 - ИТ-услуги
	// ВАЖНО: Замените ИНН и КПП на реальные значения из вашей базы!
	ТекстСписка =
	"7704000000;770401001;АБИСОФТ ООО
	|7705000000;770501001;АБИУС ООО
	|7706000000;770601001;АЙТИ ЛАЙТ ООО
	|7707000000;770701001;АКРИБИЯ. ПРОЕКТЫ И СЕРВИС ООО
	|7708000000;770801001;ВИНВЕСТОР АО
	|7713076301;771301001;ВЫМПЕЛКОМ ПАО
	|7710000000;771001001;МАКОМНЕТ АО
	|7711000000;771101001;МАСТЕРТЕЛ АО
	|7712000000;771201001;МБ ЗАЩИТА ИНФОРМАЦИИ ООО
	|7812014560;997950001;МЕГАФОН ПАО
	|7702077840;770401001;ПАО МОСКОВСКАЯ БИРЖА
	|7715000000;771501001;РНД СОФТ ООО
	|7707049388;770701001;РОСТЕЛЕКОМ ПАО
	|7717000000;771701001;СИНТЕГС ООО
	|7718000000;771801001;СКРИН МАРКЕТ СИСТЕМЗ ООО
	|7719000000;771901001;ТУРБО ТЕХНОЛОГИИ ООО";
	СохранитьСписокКонтрагентовВСправочник("Стр1_ИТУслуги", "Контрагенты по ИТ-услугам", ТекстСписка);
	
	// Строка 2 - Аренда помещений
	ТекстСписка =
	"7720000000;772001001;АПОЛЛО КОНСТРАКШН ООО
	|7721000000;772101001;ВАЛОВАЯ 37 ООО
	|7722000000;772201001;УК ЛЕРТА КАПИТАЛ ООО";
	СохранитьСписокКонтрагентовВСправочник("Стр2_АрендаПомещений", "Контрагенты по аренде помещений", ТекстСписка);
	
	// Строка 3 - Депозитарии
	ТекстСписка =
	"7729114098;772901001;НКО АО НРД
	|7744000600;774401001;РАЙФФАЙЗЕНБАНК АО
	|7710140679;771301001;ТБАНК АО";
	СохранитьСписокКонтрагентовВСправочник("Стр3_Депозитарии", "Контрагенты-депозитарии", ТекстСписка);
	
	// Строка 20 - Банк ГПБ
	ТекстСписка =
	"7744001497;772801001;Банк ГПБ (АО)";
	СохранитьСписокКонтрагентовВСправочник("Стр20_БанкГПБ", "Контрагент Банк ГПБ", ТекстСписка);
	
	#endregion

КонецПроцедуры

// Назначение: Инициализация тестовых данных для режима тестирования
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание банковских счетов для имитации контрагентов
// Примечание: В режиме тестирования используются банковские счета вместо контрагентов
Процедура ИнициализироватьТестовыеДанные(Знач ВыводитьСообщения = Ложь) Экспорт

	#region initialization
	
	Если ВыводитьСообщения Тогда
		Сообщить("<test_data_init>Начало инициализации тестовых данных</test_data_init>");
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	// Создаем 4 тестовых банковских счета вместо контрагентов
	
	// Тестовый счет 1 - для строки 1 (ИТ-услуги)
	СоздатьТестовыйБанковскийСчет("ТЕСТ_Счет1_ИТУслуги", "40702810100000000001", ВыводитьСообщения);
	
	// Тестовый счет 2 - для строки 2 (Аренда помещений)
	СоздатьТестовыйБанковскийСчет("ТЕСТ_Счет2_Аренда", "40702810200000000002", ВыводитьСообщения);
	
	// Тестовый счет 3 - для строки 3 (Депозитарии)
	СоздатьТестовыйБанковскийСчет("ТЕСТ_Счет3_Депозитарии", "40702810300000000003", ВыводитьСообщения);
	
	// Тестовый счет 4 - для строки 20 (Банк ГПБ)
	СоздатьТестовыйБанковскийСчет("ТЕСТ_Счет4_БанкГПБ", "40702810400000000004", ВыводитьСообщения);
	
	#endregion
	
	#region operation_completion
	
	Если ВыводитьСообщения Тогда
		Сообщить("<test_data_complete>Завершена инициализация тестовых данных</test_data_complete>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание тестового банковского счета
// Параметры: Наименование – Строка – Наименование счета;
//            НомерСчета – Строка – Номер счета;
//            ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание элемента справочника БанковскиеСчета
Процедура СоздатьТестовыйБанковскийСчет(Знач Наименование, Знач НомерСчета, Знач ВыводитьСообщения = Ложь)

	#region initialization
	
	#endregion
	
	#region database_query
	
	СчетСсылка = Справочники.БанковскиеСчета.НайтиПоНаименованию(Наименование, Истина);
	
	// Находим организацию-владельца по коду
	ОрганизацияСсылка = Справочники.Организации.НайтиПоКоду("00-000001");
	
	#endregion
	
	#region element_creation
	
	Если НЕ ЗначениеЗаполнено(СчетСсылка) Тогда
		СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		СчетОбъект = СчетСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	СчетОбъект.Наименование = Наименование;
	СчетОбъект.НомерСчета = НомерСчета;
	
	// Устанавливаем владельца счета
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		СчетОбъект.Владелец = ОрганизацияСсылка;
		
		Если ВыводитьСообщения Тогда
			Сообщить("<test_account_owner>Владелец счета: " + Строка(ОрганизацияСсылка) + "</test_account_owner>");
		КонецЕсли;
	Иначе
		Если ВыводитьСообщения Тогда
			Сообщить("<warning>Организация с кодом 00-000001 не найдена! Владелец счета не установлен.</warning>");
		КонецЕсли;
	КонецЕсли;
	
	#endregion
	
	#region database_write
	
	СчетОбъект.Записать();
	
	Если ВыводитьСообщения Тогда
		Сообщить("<test_account_created>Создан тестовый счет: " + Наименование + " (" + НомерСчета + ")</test_account_created>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// ФУНКЦИИ ПОЛУЧЕНИЯ КОНТРАГЕНТОВ - используют справочник Показателей или тестовые данные

// Назначение: Получение массива контрагентов для строки 1 из справочника
// Параметры: РежимТестирования – Булево – Флаг режима тестирования
// Возвращаемое: Массив – Массив ссылок на контрагентов или банковские счета
Функция ПолучитьКонтрагентов_Стр1_ИТУслуги(Знач РежимТестирования = Ложь) Экспорт
	
	Если РежимТестирования Тогда
		Возврат ПолучитьТестовыеСчета("ТЕСТ_Счет1_ИТУслуги");
	Иначе
		Возврат ПолучитьСписокКонтрагентовИзСправочника("Стр1_ИТУслуги");
	КонецЕсли;

КонецФункции

// Назначение: Получение массива контрагентов для строки 2 из справочника
// Параметры: РежимТестирования – Булево – Флаг режима тестирования
// Возвращаемое: Массив – Массив ссылок на контрагентов или банковские счета
Функция ПолучитьКонтрагентов_Стр2_АрендаПомещений(Знач РежимТестирования = Ложь) Экспорт
	
	Если РежимТестирования Тогда
		Возврат ПолучитьТестовыеСчета("ТЕСТ_Счет2_Аренда");
	Иначе
		Возврат ПолучитьСписокКонтрагентовИзСправочника("Стр2_АрендаПомещений");
	КонецЕсли;

КонецФункции

// Назначение: Получение массива контрагентов для строки 3 из справочника
// Параметры: РежимТестирования – Булево – Флаг режима тестирования
// Возвращаемое: Массив – Массив ссылок на контрагентов или банковские счета
Функция ПолучитьКонтрагентов_Стр3_Депозитарии(Знач РежимТестирования = Ложь) Экспорт
	
	Если РежимТестирования Тогда
		Возврат ПолучитьТестовыеСчета("ТЕСТ_Счет3_Депозитарии");
	Иначе
		Возврат ПолучитьСписокКонтрагентовИзСправочника("Стр3_Депозитарии");
	КонецЕсли;

КонецФункции

// Назначение: Получение массива контрагентов для строки 20 из справочника
// Параметры: РежимТестирования – Булево – Флаг режима тестирования
// Возвращаемое: Массив – Массив ссылок на контрагентов или банковские счета
Функция ПолучитьКонтрагентов_Стр20_БанкГПБ(Знач РежимТестирования = Ложь) Экспорт
	
	Если РежимТестирования Тогда
		Возврат ПолучитьТестовыеСчета("ТЕСТ_Счет4_БанкГПБ");
	Иначе
		Возврат ПолучитьСписокКонтрагентовИзСправочника("Стр20_БанкГПБ");
	КонецЕсли;

КонецФункции

// Назначение: Получение массива с тестовым банковским счетом
// Параметры: НаименованиеСчета – Строка – Наименование тестового счета
// Возвращаемое: Массив – Массив с одним банковским счетом
Функция ПолучитьТестовыеСчета(Знач НаименованиеСчета)

	#region initialization
	
	Массив = Новый Массив;
	
	#endregion
	
	#region database_query
	
	СчетСсылка = Справочники.БанковскиеСчета.НайтиПоНаименованию(НаименованиеСчета, Истина);
	
	#endregion
	
	#region data_processing
	
	Если ЗначениеЗаполнено(СчетСсылка) Тогда
		Массив.Добавить(СчетСсылка);
	КонецЕсли;
	
	#endregion
	
	#region result_formation
	
	Возврат Массив;
	
	#endregion

КонецФункции

#КонецОбласти

#Область Остатки_и_Обороты_Получение

// Назначение: Получение кода счета с учетом режима тестирования
// Параметры: КодСчета – Строка – Код счета для обычного режима
// Возвращаемое: Строка – Код счета (51 для тестирования, исходный для обычного режима)
Функция ПолучитьКодСчета(Знач КодСчета)
	
	Если мРежимТестирования Тогда
		Возврат "51";
	Иначе
		Возврат КодСчета;
	КонецЕсли;
	
КонецФункции

// Назначение: Получение остатка по счету с учетом субконто
// Параметры: Организация – СправочникСсылка – Ссылка на организацию;
//            СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет бухгалтерии;
//            МассивСсылок – Массив – Массив ссылок на субконто;
//            ДатаОстатка – Дата – Дата для расчета остатка;
//            ЭтоОстатокНаНачало – Булево – Флаг вида остатка
// Возвращаемое: Число – Сумма остатка
Функция ОстатокПоСчету(Организация, СчетСсылка, МассивСсылок, ДатаОстатка, ЭтоОстатокНаНачало = Истина) Экспорт

	#region initialization

	Если ЭтоОстатокНаНачало = Истина Тогда

		Граница = Новый Граница(НачалоДня(ДатаОстатка), ВидГраницы.Исключая);

	ИначеЕсли ЭтоОстатокНаНачало = Ложь Тогда

		Граница = Новый Граница(КонецДня(ДатаОстатка), ВидГраницы.Включая);

	КонецЕсли;

	#endregion

	#region database_query

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютнаяСуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатка,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0 Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	#endregion

	#region loop_processing

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Возврат 0;
	
	#endregion
              
КонецФункции

#КонецОбласти

#Область Логирование

// Назначение: Вывод диагностического сообщения для остатков
// Параметры: стрк – Число – Номер строки; кол – Число – Номер колонки; ЭтоОстатокНаНачало – Булево – Вид остатка;
//            СчетСсылка – ПланСчетовСсылка – Счет; ДатаОстатка – Дата – Дата остатка;
//            мСтруктураПараметров – Структура – Параметры расчета; СубконтоСсылка – Произвольный – Субконто;
//            ЗначениеПоказателя – Число – Результат расчета
Процедура ЛогВычисления_Остатки(стрк, кол, ЭтоОстатокНаНачало,
	СчетСсылка,
	ДатаОстатка,
	мСтруктураПараметров,
	СубконтоСсылка,
	ЗначениеПоказателя)
	
	#region log_output
	
	Префикс = "ГР_26.01_2025, строка " + стрк + " колонка " + кол + "::";
	Сообщить("--------------------------------------------");
	Сообщить(Префикс);
    Сообщить(Префикс + "ЭтоОстатокНаНачало = " + Строка(ЭтоОстатокНаНачало));
	Сообщить(Префикс + "СчетСсылка = " + Строка(СчетСсылка));
	Сообщить(Префикс + "ДатаОстатка = " + Строка(ДатаОстатка));
	Сообщить(Префикс + "СтруктураПараметров.Организация = " + Строка(мСтруктураПараметров.Организация));
	Если ТипЗнч(СубконтоСсылка) = Тип("Массив") Тогда
		Сообщить(Префикс + "Количество субконто в массиве=" + Строка(СубконтоСсылка.Количество()));
		Для Каждого эл Из СубконтоСсылка Цикл
			Сообщить(Префикс + "Значение субконто: " + Строка(эл));
		КонецЦикла;
	КонецЕсли;
	Сообщить(Префикс + "ЗначениеПоказателя = " + Строка(ЗначениеПоказателя));
	Сообщить("--------------------------------------------");

	#endregion

КонецПроцедуры

#КонецОбласти

#Область ВЫЧИСЛЕНИЕ_Показателей

// Назначение: Процедура тестирования всех показателей отчета
// Параметры: ДатаКол3 – Дата – Дата для колонки 3 (обычно 31 декабря предыдущего года);
//            ДатаКол4 – Дата – Дата для колонки 4 (конец отчетного периода);
//            Организация – СправочникСсылка.Организации – Организация для расчета;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений
// Операции с БД: Вызов всех функций вычисления показателей
// Примечание: Используется для тестирования в режиме тестирования
Процедура ТестироватьВсеПоказатели(ДатаКол3, ДатаКол4, Организация, Знач ВыводитьСообщения = Истина) Экспорт

	#region initialization
	
	// Подготовка структуры параметров
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	
	// Массив строк отчета с показателями
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(1);   // Кредиторская задолженность по ИТ-услугам
	МассивСтрок.Добавить(2);   // Кредиторская задолженность по аренде помещений
	МассивСтрок.Добавить(3);   // Кредиторская задолженность по услугам депозитария
	МассивСтрок.Добавить(10);  // Итого кредиторская задолженность, оцениваемая по амортизированной стоимости
	МассивСтрок.Добавить(19);  // Кредиторская задолженность по прочим финансовым обязательствам
	МассивСтрок.Добавить(20);  // Прочее
	
	Если ВыводитьСообщения Тогда
		Сообщить("╔════════════════════════════════════════════════════════════════════════╗");
		Сообщить("║  ТЕСТИРОВАНИЕ ВСЕХ ПОКАЗАТЕЛЕЙ ОТЧЕТА ГР_26.01_2025                   ║");
		Сообщить("╠════════════════════════════════════════════════════════════════════════╣");
		Сообщить("║  Дата колонки 3: " + Формат(ДатаКол3, "ДФ=dd.MM.yyyy") + "                                           ║");
		Сообщить("║  Дата колонки 4: " + Формат(ДатаКол4, "ДФ=dd.MM.yyyy") + "                                           ║");
		Сообщить("║  Организация: " + СокрЛП(Строка(Организация)) + Строка(Символы.ПС) + "║");
		Сообщить("╚════════════════════════════════════════════════════════════════════════╝");
		Сообщить("");
	КонецЕсли;
	
	#endregion
	
	#region calculation
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		Если ВыводитьСообщения Тогда
			Сообщить("┌────────────────────────────────────────────────────────────────────┐");
			Сообщить("│  СТРОКА " + Формат(НомерСтроки, "ЧЦ=2; ЧВН=") + "                                                                │");
			Сообщить("├────────────────────────────────────────────────────────────────────┤");
		КонецЕсли;
		
		// Колонка 3 - на указанную дату
		Попытка
			ЗначениеКол3 = ВычислитьПоказатель(НомерСтроки, 3, ДатаКол3, СтруктураПараметров, Ложь, Истина);
			
			Если ВыводитьСообщения Тогда
				Сообщить("│  Колонка 3 (на " + Формат(ДатаКол3, "ДФ=dd.MM.yyyy") + "):                               │");
				Сообщить("│    Значение: " + Формат(ЗначениеКол3, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00") + "                                    │");
			КонецЕсли;
		Исключение
			Если ВыводитьСообщения Тогда
				Сообщить("│  Колонка 3: ОШИБКА - " + ОписаниеОшибки() + "                    │");
			КонецЕсли;
		КонецПопытки;
		
		// Колонка 4 - на указанную дату
		Попытка
			ЗначениеКол4 = ВычислитьПоказатель(НомерСтроки, 4, ДатаКол4, СтруктураПараметров, Ложь, Истина);
			
			Если ВыводитьСообщения Тогда
				Сообщить("│  Колонка 4 (на " + Формат(ДатаКол4, "ДФ=dd.MM.yyyy") + "):                               │");
				Сообщить("│    Значение: " + Формат(ЗначениеКол4, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00") + "                                    │");
			КонецЕсли;
		Исключение
			Если ВыводитьСообщения Тогда
				Сообщить("│  Колонка 4: ОШИБКА - " + ОписаниеОшибки() + "                    │");
			КонецЕсли;
		КонецПопытки;
		
		Если ВыводитьСообщения Тогда
			Сообщить("└────────────────────────────────────────────────────────────────────┘");
			Сообщить("");
		КонецЕсли;
		
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("╔════════════════════════════════════════════════════════════════════════╗");
		Сообщить("║  ТЕСТИРОВАНИЕ ЗАВЕРШЕНО                                                ║");
		Сообщить("╚════════════════════════════════════════════════════════════════════════╝");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Универсальный метод вычисления показателя в зависимости от номера строки и колонки
// Параметры: НомерСтроки – Число – Номер строки в отчете; НомерКолонки – Число – Номер колонки в отчете;
//            пДатаОстатка – Дата – Дата, на которую вычисляется остаток;
//            пСтруктураПараметров – Структура – Параметры для расчета; пВыводитьСообщения – Булево – Вывод сообщений;
//            пРежимТестирования – Булево – Режим тестирования (используется счет 51)
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель(НомерСтроки, НомерКолонки, пДатаОстатка, пСтруктураПараметров, Знач пВыводитьСообщения = Ложь, Знач пРежимТестирования = Ложь) Экспорт
	              
	#region initialization
	
	мДатаОстатка = пДатаОстатка;
	мСтруктураПараметров = пСтруктураПараметров;
	мВыводитьСообщения = пВыводитьСообщения;
	мРежимТестирования = пРежимТестирования;
	
	#endregion
	
	#region calculation
	
	Выражение = "ВычислитьПоказатель_стр" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(НомерКолонки, "ЧГ=;ЧРГ=") + "()";
	Сообщить(Выражение);
	Выполнить(Выражение);
	
	#endregion
	
	#region result_formation
	
	Возврат мЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 1 - Кредиторская задолженность по информационно-технологическим услугам

// Назначение: Вычисление показателя строка 1 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр1кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = ПолучитьКонтрагентов_Стр1_ИТУслуги(мРежимТестирования);
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(1, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 1 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр1кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = ПолучитьКонтрагентов_Стр1_ИТУслуги(мРежимТестирования);
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(1, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 2 - Кредиторская задолженность по услугам по содержанию и аренде помещений

// Назначение: Вычисление показателя строка 2 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр2кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = ПолучитьКонтрагентов_Стр2_АрендаПомещений(мРежимТестирования);
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(2, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 2 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр2кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = ПолучитьКонтрагентов_Стр2_АрендаПомещений(мРежимТестирования);
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(2, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 3 - Кредиторская задолженность перед депозитариями

// Назначение: Вычисление показателя строка 3 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр3кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = ПолучитьКонтрагентов_Стр3_Депозитарии(мРежимТестирования);
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(3, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 3 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр3кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = ПолучитьКонтрагентов_Стр3_Депозитарии(мРежимТестирования);
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(3, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 10 - Расчеты с организаторами торговли

// Назначение: Вычисление показателя строка 10 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр10кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("47403"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(10, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 10 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр10кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("47403"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(10, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 19 - Расчеты с акционерами, участниками

// Назначение: Вычисление показателя строка 19 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр19кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60320"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(19, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 19 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр19кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60320"));
	ДатаОстатка = мДатаОстатка;
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(19, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 20 - Прочее

// Назначение: Вычисление показателя строка 20 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр20кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	ДатаОстатка = мДатаОстатка;
	
	#endregion
	
	#region calculation
	
	СчетСсылка1 = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60322"));
	СубконтоСсылка1 = Неопределено;
	Остаток1 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка1, СубконтоСсылка1, ДатаОстатка, ЭтоОстатокНаНачало);
	
	СчетСсылка2 = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	СубконтоСсылка2 = ПолучитьКонтрагентов_Стр20_БанкГПБ(мРежимТестирования);
	Остаток2 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка2, СубконтоСсылка2, ДатаОстатка, ЭтоОстатокНаНачало);
	
	ЗначениеПоказателя = Остаток1 + Остаток2;
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(20, 3, ЭтоОстатокНаНачало, СчетСсылка1, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка1, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 20 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр20кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	ДатаОстатка = мДатаОстатка;
	
	#endregion
	
	#region calculation
	
	СчетСсылка1 = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60322"));
	СубконтоСсылка1 = Неопределено;
	Остаток1 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка1, СубконтоСсылка1, ДатаОстатка, ЭтоОстатокНаНачало);
	
	СчетСсылка2 = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ПолучитьКодСчета("60311"));
	СубконтоСсылка2 = ПолучитьКонтрагентов_Стр20_БанкГПБ(мРежимТестирования);
	Остаток2 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка2, СубконтоСсылка2, ДатаОстатка, ЭтоОстатокНаНачало);
	
	ЗначениеПоказателя = Остаток1 + Остаток2;
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(20, 4, ЭтоОстатокНаНачало, СчетСсылка1, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка1, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Область основной программы

ИмяГруппы = "ГР_26.01_2025";
