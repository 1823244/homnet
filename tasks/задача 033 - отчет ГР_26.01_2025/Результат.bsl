// Отчет ГР_26.01_2025
// Кредиторская задолженность, оцениваемая по амортизированной стоимости

Перем ИмяГруппы;
Перем мНачалоПериода;
Перем мКонецПериода;
Перем мСтруктураПараметров;
Перем мВыводитьСообщения;
Перем мЗначениеПоказателя;

#Область СозданиеПоказателей

// Назначение: Основная процедура запуска создания всех показателей отчета ГР_26.01_2025
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание группы показателей, массовое создание элементов справочника
// Валидация: Проверка существования группы и показателей
Процедура СоздатьОбновитьПоказатели(Знач ВыводитьСообщения = Истина) Экспорт

	#region initialization
	
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания показателей отчета ГР_26.01_2025</operation_start>");
	КонецЕсли;
	
	#endregion
	
	#region group_preparation
	
	СоздатьГруппуПоказателей(ВыводитьСообщения);
	ПометитьВсеПоказателиНаУдаление(ВыводитьСообщения);
	
	#endregion

	СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор();

	СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор();

	#region operation_completion
	
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание показателей отчета ГР_26.01_2025</operation_end>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание группы показателей
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание элемента справочника-группы
// Валидация: Проверка существования группы перед созданием
Процедура СоздатьГруппуПоказателей(Знач ВыводитьСообщения = Ложь)

	#region initialization
	
	Идентификатор = ИмяГруппы;
	НаименованиеГруппы = ИмяГруппы;
	
	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеГруппы, Истина);
	
	#endregion
	
	#region group_creation
	
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		ГруппаОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьГруппу();
		ГруппаОбъект.Идентификатор = Идентификатор;
		ГруппаОбъект.Наименование = НаименованиеГруппы;
		ГруппаОбъект.Записать();
		
		Если ВыводитьСообщения Тогда
			Сообщить("<data_summary>Создана группа показателей: " + НаименованиеГруппы + "</data_summary>");
		КонецЕсли;
		
	Иначе
		
		Если ВыводитьСообщения Тогда
			Сообщить("<validation_result>Группа показателей уже существует: " + НаименованиеГруппы + "</validation_result>");
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Пометка всех показателей группы на удаление
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Обновление пометки удаления элементов справочника
// Производительность: Пакетная обработка через запрос
Процедура ПометитьВсеПоказателиНаУдаление(Знач ВыводитьСообщения = Ложь)

	#region initialization

	#endregion
	
	#region database_query
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	хн_нфо_ПоказателиОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.хн_нфо_ПоказателиОтчета КАК хн_нфо_ПоказателиОтчета
	|ГДЕ
	|	хн_нфо_ПоказателиОтчета.Родитель = &Родитель
	|	И НЕ хн_нфо_ПоказателиОтчета.ПометкаУдаления";
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		ВызватьИсключение "Группа не найдена: " + ИмяГруппы;
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель", ГруппаСсылка);
	
	Результат = Запрос.Выполнить();
	
	#endregion
	
	#region loop_processing
	
	КоличествоПомеченных = 0;
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ПометкаУдаления = Истина;
		ПоказательОбъект.Записать();
		КоличествоПомеченных = КоличествоПомеченных + 1;
		
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Помечено на удаление показателей: " + КоличествоПомеченных + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание или обновление показателя в справочнике
// Параметры: Идентификатор – Строка – Уникальный идентификатор показателя;
//            НаименованиеПоказателя – Строка – Наименование показателя;
//            ВидПоказателя – ПеречислениеСсылка.хн_нфо_ВидыПоказателейОтчета – Вид показателя;
//            ТипПоказателяОтчета – ПеречислениеСсылка.хн_нфо_ТипПоказателяОтчета – Тип показателя;
//            ОписаниеПоказателя – Строка – Описание показателя;
//            СписокИспользуемыхПоказателей – Строка – Список показателей через запятую;
//            ЗначениеОтбора – Произвольный – Значение отбора;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений;
//            ТекстКода – Строка – Текст программного кода;
//            Формула – Строка – Формула расчета;
//            Множитель – Число – Множитель для расчета
// Операции с БД: Создание или обновление элемента справочника показателей
Процедура СоздатьИлиОбновитьПоказатель(
	Идентификатор,
	НаименованиеПоказателя,
	ВидПоказателя,
	ТипПоказателяОтчета,
	ОписаниеПоказателя,
	СписокИспользуемыхПоказателей = "",
	ЗначениеОтбора = Неопределено,
	Знач ВыводитьСообщения = Ложь,
	ТекстКода = "",
	Формула = "",
	Множитель = 1)
	
	#region initialization

	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка: Группа " + ИмяГруппы + " не найдена</error_details>");
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ПоказательСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеПоказателя, Истина);
	
	#endregion
	
	#region indicator_creation
	
	Если НЕ ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ПоказательОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьЭлемент();
	Иначе
		ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	ПоказательОбъект.Наименование = НаименованиеПоказателя;
	ПоказательОбъект.Родитель = ГруппаСсылка;

	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	ПоказательОбъект.Формула = Формула;
	ПоказательОбъект.ОписаниеПоказателя = ОписаниеПоказателя;
	ПоказательОбъект.НеВыводитьВОтчет = Ложь;
	ПоказательОбъект.ТекстКода = ТекстКода;
	ПоказательОбъект.Множитель = Множитель;
	ПоказательОбъект.ВалютаПоказателя = Undefined;
	
	ПоказательОбъект.ФорматДаты = "";
	ПоказательОбъект.ТипРегистратора = "";
	ПоказательОбъект.ТипПоказателяОтчета = ТипПоказателяОтчета;
	
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле Тогда
		
		ПоказательОбъект.Регистр = "";
		ПоказательОбъект.Ресурс = "";
		ПоказательОбъект.ТипПоказателя = 1;
		
	Иначе
		
		ПоказательОбъект.ТипПоказателя = 0;
		ПоказательОбъект.Регистр = "Хозрасчетный";
		
		Если ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало Тогда
			ПоказательОбъект.Ресурс = "СуммаНачальныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец Тогда
			ПоказательОбъект.Ресурс = "СуммаКонечныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод Тогда
			ПоказательОбъект.Ресурс = "СуммаОборот";
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion
	
	#region tabular_section_processing
	
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле
		И НЕ ПустаяСтрока(СписокИспользуемыхПоказателей) Тогда
		
		ПоказательОбъект.ИспользуемыеПоказатели.Очистить();
		
		МассивИмен = СтрРазделить(СписокИспользуемыхПоказателей, ",", Ложь);
		Для Каждого ИмяИспользуемого Из МассивИмен Цикл
			
			ИмяИспользуемого = СокрЛП(ИмяИспользуемого);
			ИспользуемыйПоказатель = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяИспользуемого, Истина);
			
			Если ЗначениеЗаполнено(ИспользуемыйПоказатель) Тогда
				
				НоваяСтрока = ПоказательОбъект.ИспользуемыеПоказатели.Добавить();
				НоваяСтрока.Показатель = ИспользуемыйПоказатель;
				НоваяСтрока.Множитель = Множитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#endregion
	
	#region database_write
	
	ПоказательОбъект.ПометкаУдаления = Ложь;
	ПоказательОбъект.Записать();
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Создан/обновлен показатель: " + НаименованиеПоказателя + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

#Область СозданиеДетальныхПоказателей

// Назначение: Формирование текста программного кода для детального показателя
// Параметры: НомерСтроки – Число – Номер строки в отчете; НомерКолонки – Число – Номер колонки в отчете
// Возвращаемое: Строка – Текст программного кода
Функция ТекстКодаДетальногоПоказателя(НомерСтроки, НомерКолонки)

	т = "
	|СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки
	|	.НайтиПоНаименованию(""Отчет_ГР_26_01_2025"", Истина);
    |ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаОбработчика);
	|ЗначениеПоказателя = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработчика)
	|	.ВычислитьПоказатель(" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "," + Формат(НомерКолонки, "ЧГ=;ЧРГ=") + ", мНачалоПериода, мКонецПериода, СтруктураПараметров, Истина);
	|";
	
	Возврат т;
	
КонецФункции

// Назначение: Добавление детальных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями
Процедура ДобавитьДетальныеПоказателиВТЗ(ТЗ)
	
	// Колонка 3 - 31 декабря предыдущего года
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 3;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 10;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 19;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 20;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	// Колонка 4 - отчетная дата текущего года
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 3;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 10;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 19;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 20;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

КонецПроцедуры

// Назначение: Создание детальных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей
Процедура СоздатьДетальныеПоказателиИзТЗ(ТЗ)
	
	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		стрк = ТЗ[Счетчик];
				
		Идентификатор = "ГР_26_01_2025_стр" + Формат(стрк.НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(стрк.НомерКолонки, "ЧГ=;ЧРГ=");
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке,
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			"",
			Неопределено,
			Истина,
			ТекстКодаДетальногоПоказателя(стрк.НомерСтроки, стрк.НомерКолонки),
			"",
			1
			);
		
	КонецЦикла;
	
КонецПроцедуры

// Назначение: Оркестратор создания всех детальных показателей
Процедура СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор()
	
	ТЗ = ПустаяТЗПоказателей();
	ДобавитьДетальныеПоказателиВТЗ(ТЗ);
	СоздатьДетальныеПоказателиИзТЗ(ТЗ);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеГРУППИРОВОЧНЫХпоказателей

// Назначение: Оркестратор создания всех группировочных показателей
Процедура СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор()
	
	ТЗ = ПустаяТЗПоказателей();
	Добавить_Группировочные_Показатели_в_ТЗ(ТЗ);
	СоздатьГруппировочныеПоказателиИзТЗ(ТЗ);
	
КонецПроцедуры

// Назначение: Создание группировочных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей
Процедура СоздатьГруппировочныеПоказателиИзТЗ(ТЗ)

	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		стрк = ТЗ[Счетчик];
				
		Идентификатор = ид(стрк.НомерСтроки, стрк.НомерКолонки);
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			стрк.СписокИспользуемыхПоказателей,
			Неопределено,
			Истина,
			"",
			"",
			1
			);
		
	КонецЦикла

КонецПроцедуры

// Назначение: Добавление группировочных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями
Процедура Добавить_Группировочные_Показатели_в_ТЗ(ТЗ)
	
	// Строка 21 - Итого (колонка 3)
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_26_01_2025_стр1кол3,ГР_26_01_2025_стр2кол3,ГР_26_01_2025_стр3кол3,ГР_26_01_2025_стр10кол3,ГР_26_01_2025_стр19кол3,ГР_26_01_2025_стр20кол3";
	
	// Строка 21 - Итого (колонка 4)
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_26_01_2025_стр1кол4,ГР_26_01_2025_стр2кол4,ГР_26_01_2025_стр3кол4,ГР_26_01_2025_стр10кол4,ГР_26_01_2025_стр19кол4,ГР_26_01_2025_стр20кол4";

КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииДляСозданияПоказателей

// Назначение: Формирование идентификатора показателя
// Параметры: стрк – Число – Номер строки; кол – Число – Номер колонки
// Возвращаемое: Строка – Идентификатор показателя
Функция ид(стрк, кол)
	
	Возврат "ГР_26_01_2025_стр" + Формат(стрк, "ЧГ=;ЧРГ=") + "кол" + Формат(кол, "ЧГ=;ЧРГ=");
	
КонецФункции

// Назначение: Создание пустой таблицы значений для показателей
// Возвращаемое: ТаблицаЗначений – Пустая таблица с колонками для показателей
Функция ПустаяТЗПоказателей()
			
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НомерКолонки");
	ТЗ.Колонки.Добавить("Идентификатор");
	ТЗ.Колонки.Добавить("НаименованиеПоказателя");
	ТЗ.Колонки.Добавить("ВидПоказателя");
	ТЗ.Колонки.Добавить("ТипПоказателяОтчета");
	ТЗ.Колонки.Добавить("ОписаниеПоказателя");
	ТЗ.Колонки.Добавить("СписокИспользуемыхПоказателей");
	ТЗ.Колонки.Добавить("ЗначениеОтбора");
	ТЗ.Колонки.Добавить("ТекстКода");
	ТЗ.Колонки.Добавить("Формула");
	ТЗ.Колонки.Добавить("Множитель");

	Возврат ТЗ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СистемаХраненияСписковКонтрагентов

// Назначение: Получение массива контрагентов для строки 1 - информационно-технологические услуги
// Возвращаемое: Массив – Массив ссылок на контрагентов
Функция ПолучитьКонтрагентов_Стр1_ИТУслуги() Экспорт
	
	#region initialization
	
	МассивКонтрагентов = Новый Массив;
	
	#endregion
	
	#region data_processing
	
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("АБИСОФТ ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("АБИУС ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("АЙТИ ЛАЙТ ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("АКРИБИЯ. ПРОЕКТЫ И СЕРВИС ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ВИНВЕСТОР АО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ВЫМПЕЛКОМ ПАО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("МАКОМНЕТ АО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("МАСТЕРТЕЛ АО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("МБ ЗАЩИТА ИНФОРМАЦИИ ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("МЕГАФОН ПАО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ПАО МОСКОВСКАЯ БИРЖА", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("РНД СОФТ ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("РОСТЕЛЕКОМ ПАО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("СИНТЕГС ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("СКРИН МАРКЕТ СИСТЕМЗ ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ТУРБО ТЕХНОЛОГИИ ООО", Истина));
	
	#endregion
	
	#region result_formation
	
	Возврат МассивКонтрагентов;
	
	#endregion

КонецФункции

// Назначение: Получение массива контрагентов для строки 2 - услуги по содержанию и аренде помещений
// Возвращаемое: Массив – Массив ссылок на контрагентов
Функция ПолучитьКонтрагентов_Стр2_АрендаПомещений() Экспорт
	
	#region initialization
	
	МассивКонтрагентов = Новый Массив;
	
	#endregion
	
	#region data_processing
	
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("АПОЛЛО КОНСТРАКШН ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ВАЛОВАЯ 37 ООО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("УК ЛЕРТА КАПИТАЛ ООО", Истина));
	
	#endregion
	
	#region result_formation
	
	Возврат МассивКонтрагентов;
	
	#endregion

КонецФункции

// Назначение: Получение массива контрагентов для строки 3 - депозитарии
// Возвращаемое: Массив – Массив ссылок на контрагентов
Функция ПолучитьКонтрагентов_Стр3_Депозитарии() Экспорт
	
	#region initialization
	
	МассивКонтрагентов = Новый Массив;
	
	#endregion
	
	#region data_processing
	
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("НКО АО НРД", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("РАЙФФАЙЗЕНБАНК АО", Истина));
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ТБАНК АО", Истина));
	
	#endregion
	
	#region result_formation
	
	Возврат МассивКонтрагентов;
	
	#endregion

КонецФункции

// Назначение: Получение массива контрагентов для строки 20 - прочее (Банк ГПБ)
// Возвращаемое: Массив – Массив ссылок на контрагентов
Функция ПолучитьКонтрагентов_Стр20_БанкГПБ() Экспорт
	
	#region initialization
	
	МассивКонтрагентов = Новый Массив;
	
	#endregion
	
	#region data_processing
	
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("Банк ГПБ (АО)", Истина));
	
	#endregion
	
	#region result_formation
	
	Возврат МассивКонтрагентов;
	
	#endregion

КонецФункции

#КонецОбласти

#Область Остатки_и_Обороты_Получение

// Назначение: Получение остатка по счету с учетом субконто
// Параметры: Организация – СправочникСсылка – Ссылка на организацию;
//            СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет бухгалтерии;
//            МассивСсылок – Массив – Массив ссылок на субконто;
//            ДатаОстатка – Дата – Дата для расчета остатка;
//            ЭтоОстатокНаНачало – Булево – Флаг вида остатка
// Возвращаемое: Число – Сумма остатка
Функция ОстатокПоСчету(Организация, СчетСсылка, МассивСсылок, ДатаОстатка, ЭтоОстатокНаНачало = Истина) Экспорт

	#region initialization

	Если ЭтоОстатокНаНачало = Истина Тогда

		Парам_ = Новый Массив();
		Парам_.Добавить(НачалоДня(ДатаОстатка));
		Парам_.Добавить(ВидГраницы.Исключая);
		Граница_ = Новый(Тип("Граница"), Парам_);
		Граница = Новый Граница(НачалоДня(ДатаОстатка), ВидГраницы.Исключая);

	ИначеЕсли ЭтоОстатокНаНачало = Ложь Тогда

		Парам_ = Новый Массив(2);
		Парам_[0] = КонецДня(ДатаОстатка);
		Парам_[1] = ВидГраницы.Включая;
		Граница_ = Новый(Тип("Граница"), Парам_);
		Граница = Новый Граница(КонецДня(ДатаОстатка), ВидГраницы.Включая);

	КонецЕсли;

	#endregion

	#region database_query

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютнаяСуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатка,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0 Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	#endregion

	#region loop_processing

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Возврат 0;
	
	#endregion
              
КонецФункции

#КонецОбласти

#Область Логирование

// Назначение: Вывод диагностического сообщения для остатков
// Параметры: стрк – Число – Номер строки; кол – Число – Номер колонки; ЭтоОстатокНаНачало – Булево – Вид остатка;
//            СчетСсылка – ПланСчетовСсылка – Счет; ДатаОстатка – Дата – Дата остатка;
//            мСтруктураПараметров – Структура – Параметры расчета; СубконтоСсылка – Произвольный – Субконто;
//            ЗначениеПоказателя – Число – Результат расчета
Процедура ЛогВычисления_Остатки(стрк, кол, ЭтоОстатокНаНачало,
	СчетСсылка,
	ДатаОстатка,
	мСтруктураПараметров,
	СубконтоСсылка,
	ЗначениеПоказателя)
	
	#region log_output
	
	Префикс = "ГР_26.01_2025, строка " + стрк + " колонка " + кол + "::";
	Сообщить("--------------------------------------------");
	Сообщить(Префикс);
    Сообщить(Префикс + "ЭтоОстатокНаНачало = " + Строка(ЭтоОстатокНаНачало));
	Сообщить(Префикс + "СчетСсылка = " + Строка(СчетСсылка));
	Сообщить(Префикс + "ДатаОстатка = " + Строка(ДатаОстатка));
	Сообщить(Префикс + "СтруктураПараметров.Организация = " + Строка(мСтруктураПараметров.Организация));
	Если ТипЗнч(СубконтоСсылка) = Тип("Массив") Тогда
		Сообщить(Префикс + "Количество субконто в массиве=" + Строка(СубконтоСсылка.Количество()));
		Для Каждого эл Из СубконтоСсылка Цикл
			Сообщить(Префикс + "Значение субконто: " + Строка(эл));
		КонецЦикла;
	КонецЕсли;
	Сообщить(Префикс + "ЗначениеПоказателя = " + Строка(ЗначениеПоказателя));
	Сообщить("--------------------------------------------");

	#endregion

КонецПроцедуры

#КонецОбласти

#Область ВЫЧИСЛЕНИЕ_Показателей

// Назначение: Универсальный метод вычисления показателя в зависимости от номера строки и колонки
// Параметры: НомерСтроки – Число – Номер строки в отчете; НомерКолонки – Число – Номер колонки в отчете;
//            пНачалоПериода – Дата – Начало периода; пКонецПериода – Дата – Конец периода;
//            пСтруктураПараметров – Структура – Параметры для расчета; пВыводитьСообщения – Булево – Вывод сообщений
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель(НомерСтроки, НомерКолонки, пНачалоПериода, пКонецПериода, пСтруктураПараметров, Знач пВыводитьСообщения = Ложь) Экспорт
	              
	#region initialization
	
	мНачалоПериода = пНачалоПериода;
	мКонецПериода = пКонецПериода;
	мСтруктураПараметров = пСтруктураПараметров;
	мВыводитьСообщения = пВыводитьСообщения;
	
	#endregion
	
	#region calculation
	
	Выражение = "ВычислитьПоказатель_стр" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(НомерКолонки, "ЧГ=;ЧРГ=") + "()";
	Сообщить(Выражение);
	Выполнить(Выражение);
	
	#endregion
	
	#region result_formation
	
	Возврат мЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 1 - Кредиторская задолженность по информационно-технологическим услугам

// Назначение: Вычисление показателя строка 1 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр1кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	ДатаОстатка = КонецГода(НачалоГода(мНачалоПериода) - 1);
	СубконтоСсылка = ПолучитьКонтрагентов_Стр1_ИТУслуги();
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(1, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 1 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр1кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	ДатаОстатка = КонецДня(мКонецПериода);
	СубконтоСсылка = ПолучитьКонтрагентов_Стр1_ИТУслуги();
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(1, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 2 - Кредиторская задолженность по услугам по содержанию и аренде помещений

// Назначение: Вычисление показателя строка 2 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр2кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	ДатаОстатка = КонецГода(НачалоГода(мНачалоПериода) - 1);
	СубконтоСсылка = ПолучитьКонтрагентов_Стр2_АрендаПомещений();
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(2, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 2 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр2кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	ДатаОстатка = КонецДня(мКонецПериода);
	СубконтоСсылка = ПолучитьКонтрагентов_Стр2_АрендаПомещений();
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(2, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 3 - Кредиторская задолженность перед депозитариями

// Назначение: Вычисление показателя строка 3 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр3кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	ДатаОстатка = КонецГода(НачалоГода(мНачалоПериода) - 1);
	СубконтоСсылка = ПолучитьКонтрагентов_Стр3_Депозитарии();
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(3, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 3 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр3кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	ДатаОстатка = КонецДня(мКонецПериода);
	СубконтоСсылка = ПолучитьКонтрагентов_Стр3_Депозитарии();
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(3, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 10 - Расчеты с организаторами торговли

// Назначение: Вычисление показателя строка 10 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр10кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("47403");
	ДатаОстатка = КонецГода(НачалоГода(мНачалоПериода) - 1);
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(10, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 10 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр10кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("47403");
	ДатаОстатка = КонецДня(мКонецПериода);
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(10, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 19 - Расчеты с акционерами, участниками

// Назначение: Вычисление показателя строка 19 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр19кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60320");
	ДатаОстатка = КонецГода(НачалоГода(мНачалоПериода) - 1);
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(19, 3, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 19 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр19кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60320");
	ДатаОстатка = КонецДня(мКонецПериода);
	СубконтоСсылка = Неопределено;
	
	#endregion
	
	#region calculation
	
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(19, 4, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// СТРОКА 20 - Прочее

// Назначение: Вычисление показателя строка 20 колонка 3
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр20кол3()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	ДатаОстатка = КонецГода(НачалоГода(мНачалоПериода) - 1);
	
	#endregion
	
	#region calculation
	
	СчетСсылка1 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60322");
	СубконтоСсылка1 = Неопределено;
	Остаток1 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка1, СубконтоСсылка1, ДатаОстатка, ЭтоОстатокНаНачало);
	
	СчетСсылка2 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	СубконтоСсылка2 = ПолучитьКонтрагентов_Стр20_БанкГПБ();
	Остаток2 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка2, СубконтоСсылка2, ДатаОстатка, ЭтоОстатокНаНачало);
	
	ЗначениеПоказателя = Остаток1 + Остаток2;
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(20, 3, ЭтоОстатокНаНачало, СчетСсылка1, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка1, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

// Назначение: Вычисление показателя строка 20 колонка 4
// Возвращаемое: Число – Значение показателя
Функция ВычислитьПоказатель_стр20кол4()

	#region initialization
	
	ЭтоОстатокНаНачало = Ложь;
	ДатаОстатка = КонецДня(мКонецПериода);
	
	#endregion
	
	#region calculation
	
	СчетСсылка1 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60322");
	СубконтоСсылка1 = Неопределено;
	Остаток1 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка1, СубконтоСсылка1, ДатаОстатка, ЭтоОстатокНаНачало);
	
	СчетСсылка2 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60311");
	СубконтоСсылка2 = ПолучитьКонтрагентов_Стр20_БанкГПБ();
	Остаток2 = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка2, СубконтоСсылка2, ДатаОстатка, ЭтоОстатокНаНачало);
	
	ЗначениеПоказателя = Остаток1 + Остаток2;
	
	#endregion
	
	#region logging
	
	ЛогВычисления_Остатки(20, 4, ЭтоОстатокНаНачало, СчетСсылка1, ДатаОстатка, мСтруктураПараметров, СубконтоСсылка1, ЗначениеПоказателя);
	
	#endregion
	
	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	
	#endregion

КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////
// Область основной программы

ИмяГруппы = "ГР_26.01_2025";
