// Модуль внешней обработки для отчета ГР_20.02_2025 - Запасы
// Назначение: Создание и вычисление показателей отчета в справочнике хн_нфо_ПоказателиОтчета
// Основан на структуре отчета ГР_19.01_2025

Перем ИмяГруппы;
Перем мНачалоПериода;
Перем мКонецПериода;
Перем мСтруктураПараметров;
Перем мВыводитьСообщения;
Перем мЗначениеПоказателя;

#Область ПодключениеОбработкиКБСП

// Назначение: Предоставление сведений о внешней обработке для подключения к БСП
// Возвращаемое: Структура – Параметры регистрации обработки
Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид", ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("Наименование", "Отчет20022025");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", "Отчет 20.02_2025 - Запасы");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");

	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Открыть форму : Отчет 20.02_2025", "Форма_Отчет20022025", ТипКоманды, Ложь);

	Возврат ПараметрыРегистрации;
	
КонецФункции

// Назначение: Добавление команды в таблицу команд внешней обработки
// Параметры: ТаблицаКоманд – ТаблицаЗначений – Таблица команд обработки; Представление – Строка – Отображаемое имя команды; Идентификатор – Строка – Уникальный идентификатор команды; Использование – Строка – Тип команды; ПоказыватьОповещение – Булево – Флаг показа оповещения; Модификатор – Строка – Модификатор команды
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	#region command_addition
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
	#endregion
	
КонецПроцедуры

// Назначение: Интерфейс для запуска логики обработки
// Параметры: ИмяКоманды – Строка – Имя выполняемой команды; ПараметрыВыполнения – Структура – Параметры выполнения команды
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПоказателей

// Назначение: Основная процедура запуска создания всех показателей отчета ГР 20.02.2025
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание группы показателей, массовое создание элементов справочника
// Валидация: Проверка существования группы и показателей
Процедура СоздатьОбновитьПоказатели(Знач ВыводитьСообщения = Истина) Экспорт
 
	#region initialization
	
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания показателей отчета ГР 20.02.2025</operation_start>");
	КонецЕсли;
	
	#endregion
	
	#region group_preparation
	
	СоздатьГруппуПоказателей(ВыводитьСообщения);
	ПометитьВсеПоказателиНаУдаление(ВыводитьСообщения);
	
	#endregion

	#region indicators_creation
	
	СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор();
	СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор();
	СоздатьПоказатели_колонка8_ИзТЗ_Оркестратор();
	
	#endregion
	
	#region operation_completion
	
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание показателей отчета ГР_20.02_2025</operation_end>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание группы показателей отчета
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание элемента справочника-группы
// Валидация: Проверка существования группы перед созданием
Процедура СоздатьГруппуПоказателей(Знач ВыводитьСообщения = Ложь)

	#region initialization
	
	Идентификатор = ИмяГруппы;
	НаименованиеГруппы = ИмяГруппы;
	
	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеГруппы, Истина);
	
	#endregion
	
	#region group_creation
	
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		ГруппаОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьГруппу();
		ГруппаОбъект.Идентификатор = Идентификатор;
		ГруппаОбъект.Наименование = НаименованиеГруппы;
		ГруппаОбъект.Записать();
		
		Если ВыводитьСообщения Тогда
			Сообщить("<data_summary>Создана группа показателей: " + НаименованиеГруппы + "</data_summary>");
		КонецЕсли;
		
	Иначе
		
		Если ВыводитьСообщения Тогда
			Сообщить("<validation_result>Группа показателей уже существует: " + НаименованиеГруппы + "</validation_result>");
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Пометка всех показателей группы на удаление
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Обновление пометки удаления элементов справочника
// Производительность: Пакетная обработка через запрос
Процедура ПометитьВсеПоказателиНаУдаление(Знач ВыводитьСообщения = Ложь)

	#region database_query
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	хн_нфо_ПоказателиОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.хн_нфо_ПоказателиОтчета КАК хн_нфо_ПоказателиОтчета
	|ГДЕ
	|	хн_нфо_ПоказателиОтчета.Родитель = &Родитель
	|	И НЕ хн_нфо_ПоказателиОтчета.ПометкаУдаления";
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		ВызватьИсключение "Группа не найдена: " + ИмяГруппы;
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель", ГруппаСсылка);
	
	Результат = Запрос.Выполнить();
	
	#endregion
	
	#region loop_processing
	
	КоличествоПомеченных = 0;
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ПометкаУдаления = Истина;
		ПоказательОбъект.Записать();
		КоличествоПомеченных = КоличествоПомеченных + 1;
		
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Помечено на удаление показателей: " + КоличествоПомеченных + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание или обновление одного показателя отчета
// Параметры: Идентификатор – Строка – Уникальный идентификатор показателя; НаименованиеПоказателя – Строка – Наименование показателя; ВидПоказателя – ПеречислениеСсылка.хн_нфо_ВидыПоказателейОтчета – Вид показателя; ТипПоказателяОтчета – ПеречислениеСсылка.хн_нфо_ТипПоказателяОтчета – Тип показателя; ОписаниеПоказателя – Строка – Описание показателя; СписокИспользуемыхПоказателей – Строка – Список идентификаторов используемых показателей через запятую; ЗначениеОтбора – Произвольный – Значение отбора для показателя; ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений; ТекстКода – Строка – Текст программного кода для вычисления; Формула – Строка – Формула расчета; Множитель – Число – Множитель для расчета
// Операции с БД: Создание или обновление элемента справочника
// Валидация: Проверка существования группы и показателя
Процедура СоздатьИлиОбновитьПоказатель(
	Идентификатор,
	НаименованиеПоказателя,
	ВидПоказателя,
	ТипПоказателяОтчета,
	ОписаниеПоказателя,
	СписокИспользуемыхПоказателей = "",
	ЗначениеОтбора = Неопределено,
	Знач ВыводитьСообщения = Ложь,
	ТекстКода = "",
	Формула = "",
	Множитель = 1)
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка: Группа " + ИмяГруппы + " не найдена</error_details>");
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ПоказательСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеПоказателя, Истина);
	
	#endregion
	
	#region indicator_creation
	
	Если НЕ ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ПоказательОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьЭлемент();
	Иначе
		ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	ПоказательОбъект.Наименование = НаименованиеПоказателя;
	ПоказательОбъект.Родитель = ГруппаСсылка;
	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	ПоказательОбъект.Формула = Формула;
	ПоказательОбъект.ОписаниеПоказателя = ОписаниеПоказателя;
	ПоказательОбъект.НеВыводитьВОтчет = Ложь;
	ПоказательОбъект.ТекстКода = ТекстКода;
	ПоказательОбъект.Множитель = Множитель;
	ПоказательОбъект.ВалютаПоказателя = Undefined;
	ПоказательОбъект.ФорматДаты = "";
	ПоказательОбъект.ТипРегистратора = "";
	ПоказательОбъект.ТипПоказателяОтчета = ТипПоказателяОтчета;
	
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле Тогда
		
		ПоказательОбъект.Регистр = "";
		ПоказательОбъект.Ресурс = "";
		ПоказательОбъект.ТипПоказателя = 1;
		
	Иначе
		
		ПоказательОбъект.ТипПоказателя = 0;
		ПоказательОбъект.Регистр = "Хозрасчетный";
		
		Если ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало Тогда
			ПоказательОбъект.Ресурс = "СуммаНачальныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец Тогда
			ПоказательОбъект.Ресурс = "СуммаКонечныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод Тогда
			ПоказательОбъект.Ресурс = "СуммаОборот";
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion
	
	#region tabular_section_processing
	
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле И НЕ ПустаяСтрока(СписокИспользуемыхПоказателей) Тогда
		
		ПоказательОбъект.ИспользуемыеПоказатели.Очистить();
		
		МассивИмен = СтрРазделить(СписокИспользуемыхПоказателей, ",", Ложь);
		Для каждого ИмяИспользуемого Из МассивИмен Цикл
			
			ИмяИспользуемого = СокрЛП(ИмяИспользуемого);
			ИспользуемыйПоказатель = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяИспользуемого, Истина);
			
			Если ЗначениеЗаполнено(ИспользуемыйПоказатель) Тогда
				
				НоваяСтрока = ПоказательОбъект.ИспользуемыеПоказатели.Добавить();
				НоваяСтрока.Показатель = ИспользуемыйПоказатель;
				НоваяСтрока.Множитель = Множитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#endregion
	
	#region database_write
	
	ПоказательОбъект.ПометкаУдаления = Ложь;
	ПоказательОбъект.Записать();
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Создан/обновлен показатель: " + НаименованиеПоказателя + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

#Область СозданиеДетальныхПоказателей

// Назначение: Формирование текста программного кода для детального показателя
// Параметры: НомерСтроки – Число – Номер строки в отчете; НомерКолонки – Число – Номер колонки в отчете
// Возвращаемое: Строка – Текст программного кода вычисления показателя
Функция ТекстКодаДетальногоПоказателя(НомерСтроки, НомерКолонки)

	#region code_generation
	
	т = "
	|СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки
	|	.НайтиПоНаименованию(""Отчет20022025"", Истина);
    |ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаОбработчика);
	|ЗначениеПоказателя = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработчика)
	|	.ВычислитьПоказатель(" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + ", " + Формат(НомерКолонки, "ЧГ=;ЧРГ=") +
		", мНачалоПериода, мКонецПериода, СтруктураПараметров, Истина);
	|";
	
	#endregion
	
	Возврат т;
	
КонецФункции

// Назначение: Добавление детальных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями
// Операции с БД: Нет прямых операций
Процедура ДобавитьДетальныеПоказателиВТЗ(ТЗ)
	
	#region previous_period_indicators
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 4;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 7;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 13;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	#endregion
	
	#region current_period_indicators
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 16;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 18;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 27;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	
	#endregion

КонецПроцедуры

// Назначение: Универсальный метод создания детального показателя из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей
// Операции с БД: Массовое создание показателей через вызов СоздатьИлиОбновитьПоказатель
Процедура СоздатьДетальныеПоказателиИзТЗ(ТЗ)
	
	#region loop_processing
	
	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		
		стрк = ТЗ[Счетчик];
				
		Идентификатор = "ГР_20_02_2025_стр" + Формат(стрк.НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(стрк.НомерКолонки, "ЧГ=;ЧРГ=");
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке,
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			"",
			Неопределено,
			Истина,
			ТекстКодаДетальногоПоказателя(стрк.НомерСтроки, стрк.НомерКолонки),
			"",
			1
		);
		
	КонецЦикла;
	
	#endregion
	
КонецПроцедуры

// Назначение: Главная процедура создания всех детальных показателей
// Операции с БД: Создание показателей в справочнике через вызов СоздатьДетальныеПоказателиИзТЗ
Процедура СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор()
	
	#region orchestration
	
	ТЗ = ПустаяТЗПоказателей();
	ДобавитьДетальныеПоказателиВТЗ(ТЗ);
	СоздатьДетальныеПоказателиИзТЗ(ТЗ);
	
	#endregion
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеКОЛОНКИ8_для_всех_видов_показателей

// Назначение: Добавление показателей колонки 8 (Итого) в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями
Процедура Добавить_Показатели_Колонки8_в_ТЗ(ТЗ)
	
	#region previous_period_totals
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 4;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 7;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 13;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	#endregion
	
	#region current_period_totals
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 16;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 18;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 27;
	стрк.НомерКолонки = 8;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	#endregion

КонецПроцедуры

// Назначение: Универсальный метод создания показателя для колонки 8
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей
Процедура СоздатьКолонку8ПоказателиИзТЗ(ТЗ)
	
	#region loop_processing
	
	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		
		стрк = ТЗ[Счетчик];
				
		Идентификатор = ид(стрк.НомерСтроки, стрк.НомерКолонки);
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			стрк.СписокИспользуемыхПоказателей,
			Неопределено,
			Истина,
			"",
			"",
			1
		);
		
	КонецЦикла;
	
	#endregion
	
КонецПроцедуры

// Назначение: Главная процедура для колонки 8
Процедура СоздатьПоказатели_колонка8_ИзТЗ_Оркестратор()
	
	#region orchestration
	
	ТЗ = ПустаяТЗПоказателей();
	Добавить_Показатели_Колонки8_в_ТЗ(ТЗ);
	СоздатьКолонку8ПоказателиИзТЗ(ТЗ);
	
	#endregion
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеГРУППИРОВОЧНЫХпоказателей

// Назначение: Главная процедура для группировочных строк
Процедура СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор()
	
	#region orchestration
	
	ТЗ = ПустаяТЗПоказателей();
	Добавить_Группировочные_Показатели_в_ТЗ(ТЗ);
	СоздатьГруппировочныеПоказателиИзТЗ(ТЗ);
	
	#endregion
	
КонецПроцедуры

// Назначение: Создание группировочных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей
Процедура СоздатьГруппировочныеПоказателиИзТЗ(ТЗ)

	#region loop_processing
	
	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл
		
		стрк = ТЗ[Счетчик];
				
		Идентификатор = ид(стрк.НомерСтроки, стрк.НомерКолонки);
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			стрк.СписокИспользуемыхПоказателей,
			Неопределено,
			Истина,
			"",
			"",
			1
		);
		
	КонецЦикла;
	
	#endregion
	
КонецПроцедуры

// Назначение: Добавление группировочных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями
Процедура Добавить_Группировочные_Показатели_в_ТЗ(ТЗ)
	
	#region previous_period_grouping
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр2кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр2кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 5;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр2кол5";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 6;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр2кол6";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр2кол7";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр13кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр13кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 5;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр13кол5";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 6;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр13кол6";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр13кол7";
	
	#endregion
	
	#region current_period_grouping
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр16кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр16кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 5;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр16кол5";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 6;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр16кол6";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр16кол7";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр27кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр27кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 5;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр27кол5";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 6;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр27кол6";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_20_02_2025_стр27кол7";
	
	#endregion

КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииДляСозданияПоказателей

// Назначение: Формирование идентификатора показателя по номеру строки и колонки
// Параметры: стрк – Число – Номер строки; кол – Число – Номер колонки
// Возвращаемое: Строка – Идентификатор показателя
Функция ид(стрк, кол)
	
	Возврат "ГР_20_02_2025_стр" + Формат(стрк, "ЧГ=;ЧРГ=") + "кол" + Формат(кол, "ЧГ=;ЧРГ=");
	
КонецФункции

// Назначение: Формирование списка идентификаторов показателей по номеру строки для колонок 3-7
// Параметры: НомерСтроки – Число – Номер строки в отчете
// Возвращаемое: Строка – Список идентификаторов через запятую
Функция список_ид_по_номеру_стрк(НомерСтроки)
	
	Возврат ид(НомерСтроки, 3) + "," + ид(НомерСтроки, 4) + "," + ид(НомерСтроки, 5) + "," + ид(НомерСтроки, 6) + "," + ид(НомерСтроки, 7);
	
КонецФункции

// Назначение: Вычисление конца предыдущего периода с учетом високосных лет
// Возвращаемое: Дата – Конец предыдущего периода
Функция КонецПредыдущегоПериода()
	
	#region calculation
	
	_КонецПериода = ДобавитьМесяц(мКонецПериода, -12);
	Если КонецДня(мКонецПериода) = КонецМесяца(мКонецПериода) И Месяц(_КонецПериода) = 2 Тогда
		Если ОбщегоНазначенияБЗККлиентСервер.ЭтоВисокосныйГод(_КонецПериода) Тогда
			_КонецПериода = КонецМесяца(_КонецПериода);
		КонецЕсли;
	КонецЕсли;
	
	#endregion
	
	Возврат _КонецПериода;
	
КонецФункции

// Назначение: Создание пустой таблицы значений для хранения данных показателей
// Возвращаемое: ТаблицаЗначений – Пустая таблица с колонками для показателей
Функция ПустаяТЗПоказателей()
			
	#region table_creation
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НомерКолонки");
	ТЗ.Колонки.Добавить("Идентификатор");
	ТЗ.Колонки.Добавить("НаименованиеПоказателя");
	ТЗ.Колонки.Добавить("ВидПоказателя");
	ТЗ.Колонки.Добавить("ТипПоказателяОтчета");
	ТЗ.Колонки.Добавить("ОписаниеПоказателя");
	ТЗ.Колонки.Добавить("СписокИспользуемыхПоказателей");
	ТЗ.Колонки.Добавить("ЗначениеОтбора");
	ТЗ.Колонки.Добавить("ТекстКода");
	ТЗ.Колонки.Добавить("Формула");
	ТЗ.Колонки.Добавить("Множитель");
	
	#endregion

	Возврат ТЗ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Остатки_и_Обороты_Получение

// Назначение: Получение оборотов по счету за период с учетом направления оборота
// Параметры: Организация – СправочникСсылка – Ссылка на организацию; СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет учета; МассивСсылок – Массив – Ссылки на субконто для отбора; _НачалоПериода – Дата – Начало периода; _КонецПериода – Дата – Конец периода; ЭтоДебетовыйОборот – Булево – Флаг направления оборота (Истина для дебета, Ложь для кредита)
// Возвращаемое: Число – Сумма оборота
// Операции с БД: Запрос к регистру бухгалтерии Хозрасчетный
Функция ОборотыПоСчету(Организация, СчетСсылка, МассивСсылок, _НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот = Истина) Экспорт
	
	#region database_query
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборот) КАК СуммаОборот,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстаткиИОбороты";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(_НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(_КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0 Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	#endregion
	
	#region result_formation
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЭтоДебетовыйОборот Тогда
		
			Возврат ВыборкаДетальныеЗаписи.СуммаОборотДт;
		
		Иначе
			
			Возврат ВыборкаДетальныеЗаписи.СуммаОборотКт;
		КонецЕсли;
		
	КонецЦикла;
	
	#endregion
	
	Возврат 0;
	
КонецФункции

// Назначение: Получение остатка по счету на указанную дату
// Параметры: Организация – СправочникСсылка – Ссылка на организацию; СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет учета; МассивСсылок – Массив – Ссылки на субконто для отбора; ДатаОстатка – Дата – Дата расчета остатка; ЭтоОстатокНаНачало – Булево – Флаг вида остатка (Истина для начала дня, Ложь для конца дня)
// Возвращаемое: Число – Сумма остатка
// Операции с БД: Запрос к регистру бухгалтерии Хозрасчетный
Функция ОстатокПоСчету(Организация, СчетСсылка, МассивСсылок, ДатаОстатка, ЭтоОстатокНаНачало = Истина) Экспорт

	#region calculation
	
	Если ЭтоОстатокНаНачало = Истина Тогда

		Граница = Новый Граница(НачалоДня(ДатаОстатка), ВидГраницы.Исключая);

	ИначеЕсли ЭтоОстатокНаНачало = Ложь Тогда

		Граница = Новый Граница(КонецДня(ДатаОстатка), ВидГраницы.Включая);

	КонецЕсли;
	
	#endregion

	#region database_query
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатка,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0 Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	#endregion

	#region result_formation
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	#endregion
	
	Возврат 0;
              
КонецФункции

#КонецОбласти

#Область ВЫЧИСЛЕНИЕ_Показателей

// Назначение: Универсальный метод вычисления показателя по номеру строки и колонки
// Параметры: НомерСтроки – Число – Номер строки в отчете; НомерКолонки – Число – Номер колонки в отчете; пНачалоПериода – Дата – Начало периода отчета; пКонецПериода – Дата – Конец периода отчета; пСтруктураПараметров – Структура – Параметры отчета (Организация и др.); пВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Возвращаемое: Произвольный – Значение показателя
Функция ВычислитьПоказатель(НомерСтроки, НомерКолонки, пНачалоПериода, пКонецПериода, пСтруктураПараметров, Знач пВыводитьСообщения = Ложь) Экспорт
	              
	#region initialization
	
	мНачалоПериода = пНачалоПериода;
	мКонецПериода = пКонецПериода;
	мСтруктураПараметров = пСтруктураПараметров;
	мВыводитьСообщения = пВыводитьСообщения;
	
	#endregion
	
	#region execution
	
	Выражение = "ВычислитьПоказатель_стр" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(НомерКолонки, "ЧГ=;ЧРГ=") + "()";
	Если мВыводитьСообщения Тогда
		Сообщить(Выражение);
	КонецЕсли;
	Выполнить(Выражение);
	
	#endregion
	
	Возврат мЗначениеПоказателя;

КонецФункции

#Область ПредыдущийПериод

// СТРОКА 2 - Стоимость (или оценка) запасов на начало предыдущего периода, колонка 7 (Прочее)

// Назначение: Вычисление остатка по счету 61003 на начало предыдущего периода
// Возвращаемое: Число – Остаток на начало предыдущего года
Функция ВычислитьПоказатель_стр2кол7()
    
	#region calculation
	
	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода) - 1);
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

// СТРОКА 4 - Поступление (создание) запасов за предыдущий период, колонка 7 (Прочее)

// Назначение: Вычисление дебетового оборота по счету 61003 за предыдущий период
// Возвращаемое: Число – Оборот по дебету за предыдущий год
Функция ВычислитьПоказатель_стр4кол7()
	
	#region calculation
	
	ЭтоДебетовыйОборот = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода) - 1);
	_КонецПериода = КонецПредыдущегоПериода();
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОборотыПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, _НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

// СТРОКА 7 - Выбытие запасов за предыдущий период, колонка 7 (Прочее)

// Назначение: Вычисление кредитового оборота по счету 61003 за предыдущий период со знаком минус
// Возвращаемое: Число – Оборот по кредиту за предыдущий год (отрицательное значение)
Функция ВычислитьПоказатель_стр7кол7()
	
	#region calculation
	
	ЭтоДебетовыйОборот = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода) - 1);
	_КонецПериода = КонецПредыдущегоПериода();
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = -1 * ОборотыПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, _НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

// СТРОКА 13 - Стоимость (или оценка) запасов на конец предыдущего периода, колонка 7 (Прочее)

// Назначение: Вычисление остатка по счету 61003 на конец предыдущего периода
// Возвращаемое: Число – Остаток на конец предыдущего года
Функция ВычислитьПоказатель_стр13кол7()

	#region calculation
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	ДатаОстатка = КонецПредыдущегоПериода();
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

#КонецОбласти

#Область ТекущийПериод

// СТРОКА 16 - Стоимость (или оценка) запасов на начало отчетного периода, колонка 7 (Прочее)

// Назначение: Вычисление остатка по счету 61003 на начало отчетного периода
// Возвращаемое: Число – Остаток на начало отчетного периода
Функция ВычислитьПоказатель_стр16кол7()

	#region calculation
	
	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	ДатаОстатка = НачалоДня(мНачалоПериода);
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

// СТРОКА 18 - Поступление (создание) запасов в отчетном периоде, колонка 7 (Прочее)

// Назначение: Вычисление дебетового оборота по счету 61003 в отчетном периоде
// Возвращаемое: Число – Оборот по дебету в отчетном периоде
Функция ВычислитьПоказатель_стр18кол7()
	
	#region calculation
	
	ЭтоДебетовыйОборот = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	_НачалоПериода = НачалоДня(мНачалоПериода);
	_КонецПериода = КонецДня(мКонецПериода);
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОборотыПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, _НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

// СТРОКА 21 - Выбытие запасов в отчетном периоде, колонка 7 (Прочее)

// Назначение: Вычисление кредитового оборота по счету 61003 в отчетном периоде со знаком минус
// Возвращаемое: Число – Оборот по кредиту в отчетном периоде (отрицательное значение)
Функция ВычислитьПоказатель_стр21кол7()
	
	#region calculation
	
	ЭтоДебетовыйОборот = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	_НачалоПериода = НачалоДня(мНачалоПериода);
	_КонецПериода = КонецДня(мКонецПериода);
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = -1 * ОборотыПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, _НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

// СТРОКА 27 - Стоимость (или оценка) запасов на конец отчетного периода, колонка 7 (Прочее)

// Назначение: Вычисление остатка по счету 61003 на конец отчетного периода
// Возвращаемое: Число – Остаток на конец отчетного периода
Функция ВычислитьПоказатель_стр27кол7()

	#region calculation
	
	ЭтоОстатокНаНачало = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("61003");
	ДатаОстатка = КонецДня(мКонецПериода);
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	мЗначениеПоказателя = ЗначениеПоказателя;
	
	#endregion
	
	Возврат ЗначениеПоказателя;

КонецФункции

#КонецОбласти

#КонецОбласти

// Область основной программы
ИмяГруппы = "ГР_20.02_2025";
