Перем ИмяГруппы;
Перем	мНачалоПериода;
Перем	мКонецПериода;
Перем	мСтруктураПараметров;
Перем	мВыводитьСообщения;
Перем мЗначениеПоказателя;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.3");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Отчет19012025");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Отчет 19.01_2025");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);

	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
		"Открыть форму : Отчет 19.01_2025",
		"Форма_Отчет19012025",
		ТипКоманды,
		Ложь) ;
	//	
	//ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	//	"Выполнить отложенное проведение",
	//	"ВыполнитьОтложенноеПроведение",
	//	ТипКоманды, 
	//	Ложь) ;

	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "ВыполнитьОтложенноеПроведение" Тогда
		//ВыполнитьОтложенноеПроведение();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Назначение: Основная процедура запуска создания всех показателей отчета ГР 19.01.2025
// Параметры: ВыводитьСообщения - Булево - Флаг вывода диагностических сообщений
// Операции с БД: Создание группы показателей, массовое создание элементов справочника
// Валидация: Проверка существования группы и показателей
Процедура СоздатьОбновитьПоказатели(Знач ВыводитьСообщения = Истина) Экспорт
 
	#region initialization
	
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания показателей отчета ГР 19.01.2025</operation_start>");
	КонецЕсли;
	
	#endregion
	
	#region group_preparation
	
	СоздатьГруппуПоказателей(ВыводитьСообщения);
	ПометитьВсеПоказателиНаУдаление(ВыводитьСообщения);
	
	#endregion
	
	//TODO сюда вставить код вызова процедура создания показателей

	#region operation_completion
	
	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание показателей отчета ГР_18.1_2025</operation_end>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Создание группы показателей 
// Параметры: ВыводитьСообщения - Булево - Флаг вывода диагностических сообщений
// Операции с БД: Создание элемента справочника-группы
// Валидация: Проверка существования группы перед созданием
Процедура СоздатьГруппуПоказателей(Знач ВыводитьСообщения = Ложь)

	#region initialization
	
	Идентификатор = ИмяГруппы;
	НаименованиеГруппы = ИмяГруппы;
	
	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеГруппы,истина);
	
	#endregion
	
	#region group_creation
	
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		ГруппаОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьГруппу();
		ГруппаОбъект.Идентификатор = Идентификатор;
		ГруппаОбъект.Наименование = НаименованиеГруппы;
		ГруппаОбъект.Записать();
		
		Если ВыводитьСообщения Тогда
			Сообщить("<data_summary>Создана группа показателей: " + НаименованиеГруппы+ "</data_summary>");
		КонецЕсли;
		
	Иначе
		
		Если ВыводитьСообщения Тогда
			Сообщить("<validation_result>Группа показателей уже существует: " + НаименованиеГруппы + "</validation_result>");
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Назначение: Пометка всех показателей группы на удаление
// Параметры: ВыводитьСообщения - Булево - Флаг вывода диагностических сообщений
// Операции с БД: Обновление пометки удаления элементов справочника
// Производительность: Пакетная обработка через запрос
Процедура ПометитьВсеПоказателиНаУдаление(Знач ВыводитьСообщения = Ложь)

	#region initialization

	#endregion
	
	#region database_query
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	хн_нфо_ПоказателиОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.хн_нфо_ПоказателиОтчета КАК хн_нфо_ПоказателиОтчета
	|ГДЕ
	|	хн_нфо_ПоказателиОтчета.Родитель = &Родитель
	|	И НЕ хн_нфо_ПоказателиОтчета.ПометкаУдаления";
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если не ЗначениеЗаполнено(ГруппаСсылка) Тогда
		ВызватьИсключение "Группа не найдена: "+ИмяГруппы;
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель", ГруппаСсылка);
	
	Результат = Запрос.Выполнить();
	
	#endregion
	
	#region loop_processing
	
	КоличествоПомеченных = 0;
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		//ПоказательОбъект.УстановитьПометкуУдаления(Истина);
		ПоказательОбъект.ПометкаУдаления = Истина;
		ПоказательОбъект.Записать();
		КоличествоПомеченных = КоличествоПомеченных + 1;
		
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Помечено на удаление показателей: " + КоличествоПомеченных + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// ГЛАВНЫЙ МЕТОД ОБРАБОТКИ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Процедура СоздатьИлиОбновитьПоказатель(
	Идентификатор,
	НаименованиеПоказателя,
	ВидПоказателя,
	ТипПоказателяОтчета,
	ОписаниеПоказателя,
	СписокИспользуемыхПоказателей = "",
	ЗначениеОтбора = Неопределено,
	Знач ВыводитьСообщения = Ложь,
	ТекстКода = "",
	Формула = "",
	Множитель = 1)
	
	#region initialization

	#endregion
	
	#region validation
	
	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		
		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка: Группа " + ИмяГруппы + " не найдена</error_details>");
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ПоказательСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеПоказателя, Истина);
	
	#endregion
	
	#region indicator_creation
	
	Если НЕ ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ПоказательОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьЭлемент();
	Иначе
		ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	#endregion
	
	#region data_processing
	
	// Заполнение основных атрибутов
	ПоказательОбъект.Наименование = НаименованиеПоказателя;
	ПоказательОбъект.Родитель = ГруппаСсылка;

	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	ПоказательОбъект.Формула = Формула;
	ПоказательОбъект.ОписаниеПоказателя = ОписаниеПоказателя;
	ПоказательОбъект.НеВыводитьВОтчет = Ложь;
	ПоказательОбъект.ТекстКода = ТекстКода;
	ПоказательОбъект.Множитель = Множитель;
	ПоказательОбъект.ВалютаПоказателя = Undefined;
	
	ПоказательОбъект.ФорматДаты = "";
	ПоказательОбъект.ТипРегистратора = "";
	ПоказательОбъект.ТипПоказателяОтчета = ТипПоказателяОтчета;
	
	// Заполнение атрибутов в зависимости от вида показателя
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле Тогда
		
		ПоказательОбъект.Регистр = "";
		ПоказательОбъект.Ресурс = "";
		ПоказательОбъект.ТипПоказателя = 1; // Строка для формульных
		
	Иначе
		
		ПоказательОбъект.ТипПоказателя = 0; // Число
		ПоказательОбъект.Регистр = "Хозрасчетный";
		
		Если ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало Тогда
			ПоказательОбъект.Ресурс = "СуммаНачальныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец Тогда
			ПоказательОбъект.Ресурс = "СуммаКонечныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод Тогда
			ПоказательОбъект.Ресурс = "СуммаОборот";
		КонецЕсли;
		
	КонецЕсли;
	
	#endregion
	
	#region tabular_section_processing
	
	// Заполнение табличной части для формульных показателей
	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле
		И НЕ ПустаяСтрока(СписокИспользуемыхПоказателей) Тогда
		
		ПоказательОбъект.ИспользуемыеПоказатели.Очистить();
		
		МассивИмен = СтрРазделить(СписокИспользуемыхПоказателей, ",", Ложь);
		Для каждого ИмяИспользуемого Из МассивИмен Цикл
			
			ИмяИспользуемого = СокрЛП(ИмяИспользуемого);
			ИспользуемыйПоказатель = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяИспользуемого, Истина);
			
			Если ЗначениеЗаполнено(ИспользуемыйПоказатель) Тогда
				
				НоваяСтрока = ПоказательОбъект.ИспользуемыеПоказатели.Добавить();
				НоваяСтрока.Показатель = ИспользуемыйПоказатель;
				НоваяСтрока.Множитель = Множитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#endregion
	
	#region database_write
	
	//ПоказательОбъект.УстановитьПометкуУдаления(Ложь);
	ПоказательОбъект.ПометкаУдаления = Ложь;
	ПоказательОбъект.Записать();
	
	#endregion
	
	#region result_formation
	
	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Создан/обновлен показатель: " + НаименованиеПоказателя + "</data_summary>");
	КонецЕсли;
	
	#endregion

КонецПроцедуры

// Универсальный метод вычисления показателя в зависимости от номера строки и колонки
Функция ВычислитьПоказатель(НомерСтроки, НомерКолонки, пНачалоПериода, пКонецПериода, пСтруктураПараметров, Знач пВыводитьСообщения = Ложь) Экспорт
	              
	мНачалоПериода = пНачалоПериода;
	мКонецПериода = пКонецПериода;
	мСтруктураПараметров = пСтруктураПараметров;
	мВыводитьСообщения = пВыводитьСообщения;
	Выражение = "ВычислитьПоказатель_стр"+Формат(НомерСтроки,"ЧГ=;ЧРГ=")+"кол"+Формат(НомерКолонки,"ЧГ=;ЧРГ=")+"()";
	сообщить(Выражение);
	Выполнить(Выражение);
	
	Возврат мЗначениеПоказателя;

КонецФункции

#Область АналитикаОстатковИОборотов

Функция ПолучитьМассивСубконто(ГруппаОС) Экспорт
	//МассивСубконто=ПолучитьМассивСубконто(Перечисления.ГруппыОС.Сооружения);
	//МассивСубконто=ПолучитьМассивСубконто(Перечисления.ГруппыОС.ОфисноеОборудование );
	//МассивСубконто=ПолучитьМассивСубконто(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств );

	запрос=новый запрос("Выбрать ссылка из справочник.ОсновныеСредства где ГруппаОС = &ГруппаОС");
	запрос.установитьпараметр("ГруппаОС",ГруппаОС);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	ТЗ=Рез.выгрузить();
	массивСсылок=ТЗ.ВыгрузитьКолонку("Ссылка");
	Возврат массивСсылок;

КонецФункции

Функция ГруппаОС_Сооружения() Экспорт
	возврат  ПолучитьМассивСубконто(Перечисления.ГруппыОС.Сооружения);
КонецФункции

Функция ГруппаОС_ОфисноеОборудование() Экспорт
	возврат  ПолучитьМассивСубконто(Перечисления.ГруппыОС.ОфисноеОборудование);
КонецФункции

Функция ГруппаОС_Другие() Экспорт
	возврат  ПолучитьМассивСубконто(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств);
КонецФункции

#КонецОбласти

// Параметры:
//	Организация - спр ссылка
//	СчетСсылка - план счетов Хозрасчетный
//	МассивСсылок - массив - ссылки на субконто, спр НематериальныеАктивы
//	_НачалоПериода - дата
//	_КонецПериода - дата
//	ЭтоДебетовыйОборот - булево - управляет видом оборота: по Дт или по Кт
//
Функция ОборотыПоСчету(Организация, СчетСсылка, МассивСсылок, _НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот=Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборот) КАК СуммаОборот,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт) КАК ВалютнаяСуммаОборотДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт) КАК ВалютнаяСуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстаткиИОбороты";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(_НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(_КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0  Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЭтоДебетовыйОборот Тогда
		
			возврат ВыборкаДетальныеЗаписи.СуммаОборотДт;
		
		Иначе
			
			возврат ВыборкаДетальныеЗаписи.СуммаОборотКт;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Параметры:
//	Организация - спр ссылка
//	СчетСсылка - план счетов Хозрасчетный
//	МассивСсылок - массив - ссылки на субконто, спр НематериальныеАктивы
//	ДатаОстатка - дата
//	ЭтоОстатокНаНачало - булево - управляет видом границы для регистра бухгалтерии
//
Функция ОстатокПоСчету(Организация, СчетСсылка, МассивСсылок, ДатаОстатка, ЭтоОстатокНаНачало=Истина) Экспорт

	Если ЭтоОстатокНаНачало=Истина Тогда

		Парам_ = Новый Массив();
		Парам_.Добавить(НачалоДня(ДатаОстатка));
		Парам_.Добавить(ВидГраницы.Исключая);
		Граница_ = Новый(Тип("Граница"),Парам_);
		Граница = Новый Граница(НачалоДня(ДатаОстатка), ВидГраницы.Исключая);

	ИначеЕсли ЭтоОстатокНаНачало=Ложь Тогда

		Парам_ = Новый Массив(2);
		Парам_[0] = КонецДня(ДатаОстатка);
		Парам_[1] = ВидГраницы.Включая;
		Граница_ = Новый(Тип("Граница"),Парам_);
		Граница = Новый Граница(КонецДня(ДатаОстатка), ВидГраницы.Включая);

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютнаяСуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатка,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0  Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		сообщить(т);
	КонецПопытки;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	Возврат 0;
              
КонецФункции

Функция ПустаяТЗПоказателей()
			
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НомерКолонки");
	ТЗ.Колонки.Добавить("Идентификатор");
	ТЗ.Колонки.Добавить("НаименованиеПоказателя");
	ТЗ.Колонки.Добавить("ВидПоказателя");
	ТЗ.Колонки.Добавить("ТипПоказателяОтчета");
	ТЗ.Колонки.Добавить("ОписаниеПоказателя");
	ТЗ.Колонки.Добавить("СписокИспользуемыхПоказателей");
	ТЗ.Колонки.Добавить("ЗначениеОтбора");
	ТЗ.Колонки.Добавить("ТекстКода");
	ТЗ.Колонки.Добавить("Формула");
	ТЗ.Колонки.Добавить("Множитель");

	Возврат ТЗ;
	
КонецФункции

// не надо вызывать эту процедуру. это просто шаблон кода
Процедура ШаблонПустойСтрокиТЗ(ТЗ)
	
	// шаблон строки ТЗ
	стрк = ТЗ.Добавить();;
	стрк.Идентификатор 			= "";
	стрк.НаименованиеПоказателя = стрк.Идентификатор;
	стрк.ВидПоказателя 			= Неопределено;
	стрк.ТипПоказателяОтчета 	= Неопределено;
	стрк.ОписаниеПоказателя 	= "";
	стрк.СписокИспользуемыхПоказателей = "";
	стрк.ЗначениеОтбора 		= Неопределено;
	стрк.ТекстКода 				= Неопределено;
	стрк.Формула 				= Неопределено;
	стрк.Множитель 				= 1;
	
КонецПроцедуры

#Область СозданиеДетальныхПоказателей

// формирует строки с текстом программного кода детального показателя
Функция ТекстКодаДетальногоПоказателя(НомерСтроки, НомерКолонки)

	т = "
	|СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки
	|	.НайтиПоНаименованию(""Отчет19012025"",Истина);
    |ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаОбработчика);
	|ЗначениеПоказателя = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработчика)
	|	.ВычислитьПоказатель("+Формат(НомерСтроки,"ЧГ=;ЧРГ=")+","+Формат(НомерКолонки,"ЧГ=;ЧРГ=")+", мНачалоПериода, мКонецПериода, СтруктураПараметров, Истина);
	|";
	
	Возврат т;
	
КонецФункции

// Длинная процедура, в которой добавляем все показатели в ТЗ
Процедура ДобавитьДетальныеПоказателиВТЗ(ТЗ)
	
	// предыдущий период
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 2;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 2;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 2;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 2;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 3;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 3;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 3;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 3;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 5;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 5;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 5;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 5;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 10;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 10;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 10;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 10;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 11;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 11;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 11;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 11;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 13;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 13;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 13;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 13;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 25;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 25;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 25;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 25;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 26;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 26;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 26;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 26;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	// текущий период
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 29;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 29;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 29;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 29;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 30;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 30;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 30;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 30;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 32;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 32;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 32;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 32;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 37;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 37;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 37;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 37;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 38;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 38;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 38;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 38;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 40;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 40;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 40;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 40;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 52;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 52;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 52;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 52;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 53;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 53;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 53;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 53;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;

КонецПроцедуры

// Универсальный метод создания детального показателя
Процедура СоздатьДетальныеПоказателиИзТЗ(ТЗ)
	
	Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
		стрк = ТЗ[Счетчик];
				
		Идентификатор = "ГР_19_01_2025_стр"+Формат(стрк.НомерСтроки,"ЧГ=;ЧРГ=")+"кол"+Формат(стрк.НомерКолонки,"ЧГ=;ЧРГ=");
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,//стрк.НаименованиеПоказателя, 
			Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке,//стрк.ВидПоказателя, 
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			"",//стрк.СписокИспользуемыхПоказателей, 
			Неопределено, //стрк.ЗначениеОтбора,
			Истина,//выводить сообщения
			ТекстКодаДетальногоПоказателя(стрк.НомерСтроки, стрк.НомерКолонки),//стрк.ТекстКода,
			"",//стрк.Формула,
			1//Множитель
			);
		
	КонецЦикла;
	
КонецПроцедуры

// НОВАЯ ГЛАВНАЯ ПРОЦЕДУРА - создание показателей из ТЗ - ДЕТАЛЬНЫЕ (еще будут ГРУППИРОВОЧНЫЕ)
Процедура СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор()
	
	ТЗ = ПустаяТЗПоказателей();
	ДобавитьДетальныеПоказателиВТЗ(ТЗ);
	СоздатьДетальныеПоказателиИзТЗ(ТЗ);
	
КонецПроцедуры

#КонецОбласти

Функция ид(стрк, кол)
	
	Возврат "ГР_19_01_2025_стр"+Формат(стрк,"ЧГ=;ЧРГ=")+"кол"+Формат(кол,"ЧГ=;ЧРГ=");
	
КонецФункции

Функция список_ид_по_номеру_стрк(НомерСтроки)
	
	Возврат ид(НомерСтроки,3)+","+ид(НомерСтроки,4)+","+ид(НомерСтроки,6)+","+ид(НомерСтроки,7);
	
КонецФункции

#Область Создание+КОЛОНКИ12_для_всех_видов_показателей

// это вызывать в конце, после создания Детальных и Группировочных

// Длинная процедура, в которой добавляем все показатели в ТЗ
Процедура Добавить_Показатели_Колонки12_в_ТЗ(ТЗ)
	
	// предыдущий период
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 1;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 2;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 3;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 5;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 9;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 10;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 11;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 13;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 24;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 25;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 26;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	// текущий период
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 28;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 29;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 30;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 32;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 36;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);
	
	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 37;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 38;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 40;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 51;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 52;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

	стрк = ТЗ.Добавить();;
	стрк.НомерСтроки			= 53;
	стрк.НомерКолонки			= 12;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = список_ид_по_номеру_стрк(стрк.НомерСтроки);

КонецПроцедуры

// Универсальный метод создания показателя для колонки 12
Процедура СоздатьКолонку12ПоказателиИзТЗ(ТЗ)
	
	Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
		стрк = ТЗ[Счетчик];
				
		Идентификатор = ид(стрк.НомерСтроки, стрк.НомерКолонки);
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,//стрк.НаименованиеПоказателя, 
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,//стрк.ВидПоказателя, 
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			стрк.СписокИспользуемыхПоказателей,
			Неопределено, //стрк.ЗначениеОтбора,
			Истина,//выводить сообщения
			"",//текст кода
			"",//стрк.Формула,
			1//Множитель
			);
		
	КонецЦикла;
	
КонецПроцедуры

// НОВАЯ ГЛАВНАЯ ПРОЦЕДУРА для колонки 12
Процедура СоздатьПоказатели_колонка12_ИзТЗ_Оркестратор()
	
	ТЗ = ПустаяТЗПоказателей();
	Добавить_Показатели_Колонки12_в_ТЗ(ТЗ);
	СоздатьКолонку12ПоказателиИзТЗ(ТЗ);
	
КонецПроцедуры

// ГЛАВНАЯ ПРОЦЕДУРА для ГРУППИРОВОЧНЫХ строк
Процедура СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор()
	
	ТЗ = ПустаяТЗПоказателей();
	Добавить_Группировочные_Показатели_в_ТЗ(ТЗ);
	СоздатьГруппировочныеПоказателиИзТЗ(ТЗ);
	
КонецПроцедуры

Процедура СоздатьГруппировочныеПоказателиИзТЗ(ТЗ)

	Для Счетчик = 0 По ТЗ.Количество()-1 Цикл
		стрк = ТЗ[Счетчик];
				
		Идентификатор = ид(стрк.НомерСтроки, стрк.НомерКолонки);
		ОписаниеПоказателя = "";
		
		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,//стрк.НаименованиеПоказателя, 
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,//стрк.ВидПоказателя, 
			стрк.ТипПоказателяОтчета,
			ОписаниеПоказателя,
			стрк.СписокИспользуемыхПоказателей,
			Неопределено, //стрк.ЗначениеОтбора,
			Истина,//выводить сообщения
			"",//текст кода
			"",//стрк.Формула,
			1//Множитель
			);
		
	КонецЦикла;
КонецПроцедуры

Процедура Добавить_Группировочные_Показатели_в_ТЗ(ТЗ)
	
	// предыдущий период

	//1
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 1;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр2кол3,ГР_19_01_2025_стр3кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 1;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр2кол4,ГР_19_01_2025_стр3кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 1;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр2кол6,ГР_19_01_2025_стр3кол6";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 1;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр2кол7,ГР_19_01_2025_стр3кол7";

	//9
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 9;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр10кол3,ГР_19_01_2025_стр11кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 9;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр10кол4,ГР_19_01_2025_стр11кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 9;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр10кол6,ГР_19_01_2025_стр11кол6";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 9;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр10кол7,ГР_19_01_2025_стр11кол7";

	//24
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 24;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр25кол3,ГР_19_01_2025_стр26кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 24;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр25кол4,ГР_19_01_2025_стр26кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 24;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр25кол6,ГР_19_01_2025_стр26кол6";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 24;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр25кол7,ГР_19_01_2025_стр26кол7";

	// Текущий период
	
	//28
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 28;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр29кол3,ГР_19_01_2025_стр30кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 28;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр29кол4,ГР_19_01_2025_стр30кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 28;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр29кол6,ГР_19_01_2025_стр30кол6";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 28;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр29кол7,ГР_19_01_2025_стр30кол7";

	//36
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 36;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр37кол3,ГР_19_01_2025_стр38кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 36;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр37кол4,ГР_19_01_2025_стр38кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 36;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр37кол6,ГР_19_01_2025_стр38кол6";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 36;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр37кол7,ГР_19_01_2025_стр38кол7";

	// 51	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 51;
	стрк.НомерКолонки			= 3;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр28кол3,ГР_19_01_2025_стр32кол3,ГР_19_01_2025_стр36кол3,ГР_19_01_2025_стр40кол3";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 51;
	стрк.НомерКолонки			= 4;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр28кол4,ГР_19_01_2025_стр32кол4,ГР_19_01_2025_стр36кол4,ГР_19_01_2025_стр40кол4";
	
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 51;
	стрк.НомерКолонки			= 6;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр28кол6,ГР_19_01_2025_стр32кол6,ГР_19_01_2025_стр36кол6,ГР_19_01_2025_стр40кол6";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки			= 51;
	стрк.НомерКолонки			= 7;
	стрк.ТипПоказателяОтчета 	= Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_19_01_2025_стр28кол7,ГР_19_01_2025_стр32кол7,ГР_19_01_2025_стр36кол7,ГР_19_01_2025_стр40кол7";

КонецПроцедуры

#КонецОбласти

// ЛОГИРОВАНИЕ

Процедура ЛогВычисления_Остатки(стрк, кол, ЭтоОстатокНаНачало,
	СчетСсылка,
	ДатаОстатка,
	мСтруктураПараметров,
	СубконтоСсылка,
	ЗначениеПоказателя)
	Префикс = "ГР 19.01_2025, строка "+стрк+" колонка "+кол+"::";
	Сообщить("--------------------------------------------");
	Сообщить(Префикс);
    Сообщить(Префикс+"ЭтоОстатокНаНачало = "+строка(ЭтоОстатокНаНачало));
	Сообщить(Префикс+"СчетСсылка = "+строка(СчетСсылка));
	Сообщить(Префикс+"ДатаОстатка = "+строка(ДатаОстатка));
	Сообщить(Префикс+"СтруктураПараметров.Организация = "+строка(мСтруктураПараметров.Организация));
	Сообщить(Префикс+"Количество субконто в массиве="+строка(СубконтоСсылка.Количество()));
	Сообщить(Префикс+"ЗначениеПоказателя = "+строка(ЗначениеПоказателя));
	Сообщить("--------------------------------------------");

КонецПроцедуры

Процедура ЛогВычисления_Обороты(стрк, кол, ЭтоДебетовыйОборот,
	СчетСсылка,
	_НачалоПериода,
	_КонецПериода,
	мСтруктураПараметров,
	СубконтоСсылка,
	ЗначениеПоказателя)
	Префикс = "ГР 19.01_2025, строка "+стрк+" колонка "+кол+"::";
	Сообщить("--------------------------------------------");
	Сообщить(Префикс);
    Сообщить(Префикс+"ЭтоДебетовыйОборот = "+строка(ЭтоДебетовыйОборот));
	Сообщить(Префикс+"СчетСсылка = "+строка(СчетСсылка));
	Сообщить(Префикс+"НачалоПериода = "+строка(_НачалоПериода));
	Сообщить(Префикс+"_КонецПериода = "+строка(КонецПериода));
	Сообщить(Префикс+"СтруктураПараметров.Организация = "+строка(мСтруктураПараметров.Организация));
	Сообщить(Префикс+"Количество субконто в массиве="+строка(СубконтоСсылка.Количество()));
	Сообщить(Префикс+"ЗначениеПоказателя = "+строка(ЗначениеПоказателя));
	Сообщить("--------------------------------------------");

КонецПроцедуры

//////////  СТРОКА 2

Функция ВычислитьПоказатель_стр2кол3_тест()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,3,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр2кол3()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,3,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр2кол4()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_ОфисноеОборудование(); //массив
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,4,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр2кол6()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Другие(); //массив
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,6,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр2кол7()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60804.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,7,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

//////////  СТРОКА 3

Функция ВычислитьПоказатель_стр3кол3()
	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60414.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(3,3,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр3кол4()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60414.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_ОфисноеОборудование(); //массив
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(3,4,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр3кол6()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60414.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Другие(); //массив
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(3,6,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр3кол7()

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60805.ПС");
	ДатаОстатка = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = Неопределено;
	ЗначениеПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(3,7,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);		мЗначениеПоказателя = ЗначениеПоказателя;
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

//////////  СТРОКА 5

Функция ВычислитьПоказатель_стр5кол3()
	
	ЭтоДебетовыйОборот = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(5,3,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр5кол4()
	
	ЭтоДебетовыйОборот = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(5,4,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр5кол6()
	
	ЭтоДебетовыйОборот = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(5,6,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр5кол7()
	
	ЭтоДебетовыйОборот = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60804.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = Неопределено; //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(5,7,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

//////////  СТРОКА 10

Функция ВычислитьПоказатель_стр10кол3()
	
	ЭтоДебетовыйОборот = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(10,3,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр10кол4()
	
	ЭтоДебетовыйОборот = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(10,4,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр10кол6()
	
	ЭтоДебетовыйОборот = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60401.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = ГруппаОС_Сооружения(); //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(10,6,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр10кол7()
	
	ЭтоДебетовыйОборот = Ложь;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60804.ПС");
	_НачалоПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	_КонецПериода = НачалоГода(НачалоГода(мНачалоПериода)-1);
	СубконтоСсылка = Неопределено; //массив
	ЗначениеПоказателя = ОборотПоСчету(мСтруктураПараметров.Организация, СчетСсылка, СубконтоСсылка,_НачалоПериода, _КонецПериода, ЭтоДебетовыйОборот);
	ЛогВычисления_Обороты(10,7,ЭтоДебетовыйОборот,СчетСсылка,_НачалоПериода,_КонецПериода,мСтруктураПараметров,СубконтоСсылка,ЗначениеПоказателя);
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

КонецФункции

/////////////////////////////////////////////////////
// Область основной программы

ИмяГруппы = "ГР_19.01_2025";

//СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор();
СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор();
СоздатьПоказатели_колонка12_ИзТЗ_Оркестратор();

//тесты методов "ВычислитьПоказатель..."
//мНачалоПериода='20250101';
//мКонецПериода='20250801';
//мСтруктураПараметров = Новый Структура("Организация");
//мВыводитьСообщения=истина;
//ВычислитьПоказатель_стр2кол3_тест();
//конец тесты методов "ВычислитьПоказатель..."