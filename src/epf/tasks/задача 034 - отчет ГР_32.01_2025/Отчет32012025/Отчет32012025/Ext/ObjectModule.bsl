// Отчет ГР_32.01_2025
// Отчет об активах и обязательствах (кредит по текущим счетам) по операциям с иностранными резидентами,
// в отношении которых установлен запрет на проведение отдельных видов внешних или валютных операций

Перем ИмяГруппы;
Перем мНачалоПериода;
Перем мКонецПериода;
Перем мСтруктураПараметров;
Перем мВыводитьСообщения;
Перем мЗначениеПоказателя;
Перем мРежимТестирования;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.3");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Отчет32012025");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Отчет 32.01_2025");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);

	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
		"Открыть форму : Отчет 32.01_2025",
		"Форма_Отчет32012025",
		ТипКоманды,
		Ложь) ;
		
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
		"Создать (обновить) показатели",
		"СоздатьОбновитьПоказатели",
		ТипКоманды,
		Ложь) ;

	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "СоздатьОбновитьПоказатели" Тогда
		СоздатьОбновитьПоказатели(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПоказателей

// Назначение: Основная процедура запуска создания всех показателей отчета ГР_32.01_2025
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений;
//            РежимТестирования – Булево – Режим тестирования (используются тестовые данные)
// Операции с БД: Создание группы показателей, массовое создание элементов справочника
// Валидация: Проверка существования группы и показателей
Процедура СоздатьОбновитьПоказатели(Знач ВыводитьСообщения = Истина, Знач РежимТестирования = Ложь) Экспорт

	#region initialization

	ИмяГруппы = "ГР_32_01_2025";

	Если ВыводитьСообщения Тогда

		Если РежимТестирования Тогда
			Сообщить("<operation_start>Начало создания показателей отчета ГР_32.01_2025 (РЕЖИМ ТЕСТИРОВАНИЯ)</operation_start>");
		Иначе
			Сообщить("<operation_start>Начало создания показателей отчета ГР_32.01_2025</operation_start>");
		КонецЕсли;

	КонецЕсли;

	#endregion

	#region group_preparation

	СоздатьГруппуПоказателей(ВыводитьСообщения);
	ПометитьВсеПоказателиНаУдаление(ВыводитьСообщения);

	#endregion

	#region indicators_creation

	СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор(РежимТестирования, ВыводитьСообщения);
	СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор(РежимТестирования, ВыводитьСообщения);

	#endregion

	#region operation_completion

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание показателей отчета ГР_32.01_2025</operation_end>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Создание группы показателей
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание элемента справочника-группы
// Валидация: Проверка существования группы перед созданием
Процедура СоздатьГруппуПоказателей(Знач ВыводитьСообщения = Ложь)

	#region initialization

	Идентификатор = ИмяГруппы;
	НаименованиеГруппы = ИмяГруппы;

	#endregion

	#region validation

	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеГруппы, Истина);

	#endregion

	#region group_creation

	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда

		ГруппаОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьГруппу();
		ГруппаОбъект.Идентификатор = Идентификатор;
		ГруппаОбъект.Наименование = НаименованиеГруппы;
		ГруппаОбъект.Записать();

		Если ВыводитьСообщения Тогда
			Сообщить("<data_summary>Создана группа показателей: " + НаименованиеГруппы + "</data_summary>");
		КонецЕсли;

	Иначе

		Если ВыводитьСообщения Тогда
			Сообщить("<validation_result>Группа показателей уже существует: " + НаименованиеГруппы + "</validation_result>");
		КонецЕсли;

	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Пометка всех показателей группы на удаление
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Обновление пометки удаления элементов справочника
// Производительность: Пакетная обработка через запрос
Процедура ПометитьВсеПоказателиНаУдаление(Знач ВыводитьСообщения = Ложь)

	#region database_query

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	хн_нфо_ПоказателиОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.хн_нфо_ПоказателиОтчета КАК хн_нфо_ПоказателиОтчета
	|ГДЕ
	|	хн_нфо_ПоказателиОтчета.Родитель = &Родитель
	|	И НЕ хн_нфо_ПоказателиОтчета.ПометкаУдаления";

	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		ВызватьИсключение "Группа не найдена: " + ИмяГруппы;
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель", ГруппаСсылка);

	Результат = Запрос.Выполнить();

	#endregion

	#region loop_processing

	КоличествоПомеченных = 0;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл

		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ПометкаУдаления = Истина;
		ПоказательОбъект.Записать();
		КоличествоПомеченных = КоличествоПомеченных + 1;

	КонецЦикла;

	#endregion

	#region result_formation

	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Помечено на удаление показателей: " + КоличествоПомеченных + "</data_summary>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Создание или обновление показателя в справочнике
// Параметры: Идентификатор – Строка – Уникальный идентификатор показателя;
//            НаименованиеПоказателя – Строка – Наименование показателя;
//            ВидПоказателя – ПеречислениеСсылка.хн_нфо_ВидыПоказателейОтчета – Вид показателя;
//            ТипПоказателяОтчета – ПеречислениеСсылка.хн_нфо_ТипПоказателяОтчета – Тип показателя;
//            ОписаниеПоказателя – Строка – Описание показателя;
//            СписокИспользуемыхПоказателей – Строка – Список показателей через запятую;
//            ЗначениеОтбора – Произвольный – Значение отбора;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений;
//            ТекстКода – Строка – Текст программного кода;
//            Формула – Строка – Формула расчета;
//            Множитель – Число – Множитель для расчета
// Операции с БД: Создание или обновление элемента справочника показателей
Процедура СоздатьИлиОбновитьПоказатель(
	Идентификатор,
	НаименованиеПоказателя,
	ВидПоказателя,
	ТипПоказателяОтчета,
	ОписаниеПоказателя,
	СписокИспользуемыхПоказателей = "",
	ЗначениеОтбора = Неопределено,
	Знач ВыводитьСообщения = Ложь,
	ТекстКода = "",
	Формула = "",
	Множитель = 1)

	#region validation

	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда

		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка: Группа " + ИмяГруппы + " не найдена</error_details>");
		КонецЕсли;
		Возврат;

	КонецЕсли;

	ПоказательСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеПоказателя, Истина);

	#endregion

	#region indicator_creation

	Если НЕ ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ПоказательОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьЭлемент();
	Иначе
		ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	КонецЕсли;

	#endregion

	#region data_processing

	ПоказательОбъект.Наименование = НаименованиеПоказателя;
	ПоказательОбъект.Родитель = ГруппаСсылка;

	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	ПоказательОбъект.Формула = Формула;
	ПоказательОбъект.ОписаниеПоказателя = ОписаниеПоказателя;
	ПоказательОбъект.НеВыводитьВОтчет = Ложь;
	ПоказательОбъект.ТекстКода = ТекстКода;
	ПоказательОбъект.Множитель = Множитель;
	ПоказательОбъект.ВалютаПоказателя = Undefined;

	ПоказательОбъект.ФорматДаты = "";
	ПоказательОбъект.ТипРегистратора = "";
	ПоказательОбъект.ТипПоказателяОтчета = ТипПоказателяОтчета;

	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле Тогда

		ПоказательОбъект.Регистр = "";
		ПоказательОбъект.Ресурс = "";
		ПоказательОбъект.ТипПоказателя = 1;

	Иначе

		ПоказательОбъект.ТипПоказателя = 0;
		ПоказательОбъект.Регистр = "Хозрасчетный";

		Если ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало Тогда
			ПоказательОбъект.Ресурс = "СуммаНачальныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец Тогда
			ПоказательОбъект.Ресурс = "СуммаКонечныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод Тогда
			ПоказательОбъект.Ресурс = "СуммаОборот";
		КонецЕсли;

	КонецЕсли;

	#endregion

	#region tabular_section_processing

	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле
		И НЕ ПустаяСтрока(СписокИспользуемыхПоказателей) Тогда

		ПоказательОбъект.ИспользуемыеПоказатели.Очистить();

		МассивИмен = СтрРазделить(СписокИспользуемыхПоказателей, ",", Ложь);
		Для Каждого ИмяИспользуемого Из МассивИмен Цикл

			ИмяИспользуемого = СокрЛП(ИмяИспользуемого);
			ИспользуемыйПоказатель = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяИспользуемого, Истина);

			Если ЗначениеЗаполнено(ИспользуемыйПоказатель) Тогда

				Если ИспользуемыйПоказатель.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ПоказательОбъект.ИспользуемыеПоказатели.Добавить();
				НоваяСтрока.Показатель = ИспользуемыйПоказатель;
				НоваяСтрока.Множитель = Множитель;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	#endregion

	#region database_write

	ПоказательОбъект.ПометкаУдаления = Ложь;
	ПоказательОбъект.Записать();

	#endregion

	#region result_formation

	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Создан/обновлен показатель: " + НаименованиеПоказателя + "</data_summary>");
	КонецЕсли;

	#endregion

КонецПроцедуры

#КонецОбласти

#Область СозданиеДетальныхПоказателей

// Назначение: Оркестратор создания всех детальных показателей отчета
// Параметры: РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
Процедура СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор(Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region initialization

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания детальных показателей</operation_start>");
	КонецЕсли;

	ТЗ = ПустаяТЗПоказателей();

	#endregion

	#region data_processing

	ДобавитьДетальныеПоказателиВТЗ(ТЗ, РежимТестирования);
	СоздатьДетальныеПоказателиИзТЗ(ТЗ, РежимТестирования, ВыводитьСообщения);

	#endregion

	#region operation_completion

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание детальных показателей. Всего: " + Формат(ТЗ.Количество(), "ЧГ=") + "</operation_end>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Создание пустой таблицы значений для хранения данных показателей
// Возвращаемое: ТаблицаЗначений – Пустая структура для показателей
Функция ПустаяТЗПоказателей()

	#region initialization

	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НомерКолонки");
	ТЗ.Колонки.Добавить("Идентификатор");
	ТЗ.Колонки.Добавить("НаименованиеПоказателя");
	ТЗ.Колонки.Добавить("ВидПоказателя");
	ТЗ.Колонки.Добавить("ТипПоказателяОтчета");
	ТЗ.Колонки.Добавить("ОписаниеПоказателя");
	ТЗ.Колонки.Добавить("СписокИспользуемыхПоказателей");
	ТЗ.Колонки.Добавить("ЗначениеОтбора");
	ТЗ.Колонки.Добавить("ТекстКода");
	ТЗ.Колонки.Добавить("Формула");
	ТЗ.Колонки.Добавить("Множитель");

	#endregion

	#region result_formation

	Возврат ТЗ;

	#endregion

КонецФункции

// Назначение: Формирование текста программного кода для детального показателя
// Параметры: НомерСтроки – Число – Номер строки в отчете;
//            НомерКолонки – Число – Номер колонки в отчете;
//            РежимТестирования – Булево – Режим тестирования
// Возвращаемое: Строка – Текст программного кода
Функция ТекстКодаДетальногоПоказателя(НомерСтроки, НомерКолонки, РежимТестирования = Ложь)

	#region initialization

	РежимТестированияСтрока = ?(РежимТестирования, "Истина", "Ложь");

	#endregion

	#region code_generation

	т = "
	|СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки
	|	.НайтиПоНаименованию(""Отчет32012025"", Истина);
    |ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаОбработчика);
	|ЗначениеПоказателя = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработчика)
	|	.ВычислитьПоказатель(" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "," + Формат(НомерКолонки, "ЧГ=;ЧРГ=") + ", мНачалоПериода, мКонецПериода, СтруктураПараметров, Истина, " + РежимТестированияСтрока + ");
	|";

	#endregion

	#region result_formation

	Возврат т;

	#endregion

КонецФункции

// Назначение: Добавление детальных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями;
//            РежимТестирования – Булево – Режим тестирования (для совместимости)
// Примечания: Реализованы только показатели строки 2 (Заемные деньги). Остальные строки требуют уточнения счетов.
Процедура ДобавитьДетальныеПоказателиВТЗ(ТЗ, Знач РежимТестирования = Ложь)

	#region row_2_indicators

	// Строка 2
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
    стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;
	
	#endregion

КонецПроцедуры

// Назначение: Создание детальных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей;
//            РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений
Процедура СоздатьДетальныеПоказателиИзТЗ(ТЗ, Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region loop_processing

	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл

		стрк = ТЗ[Счетчик];

		Идентификатор = "ГР_32_01_2025_стр" + Формат(стрк.НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(стрк.НомерКолонки, "ЧГ=;ЧРГ=");

		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке,
			стрк.ТипПоказателяОтчета,
			"",
			"",
			Неопределено,
			ВыводитьСообщения,
			ТекстКодаДетальногоПоказателя(стрк.НомерСтроки, стрк.НомерКолонки, РежимТестирования),
			"",
			1
		);

	КонецЦикла;

	#endregion

КонецПроцедуры

#КонецОбласти

#Область СозданиеГруппировочныхПоказателей

// Назначение: Оркестратор создания всех группировочных показателей отчета
// Параметры: РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
Процедура СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор(Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region initialization

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания группировочных показателей</operation_start>");
	КонецЕсли;

	ТЗ = ПустаяТЗПоказателей();

	#endregion

	#region data_processing

	Добавить_Группировочные_Показатели_в_ТЗ(ТЗ, РежимТестирования);
	СоздатьГруппировочныеПоказателиИзТЗ(ТЗ, РежимТестирования, ВыводитьСообщения);

	#endregion

	#region operation_completion

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание группировочных показателей. Всего: " + Формат(ТЗ.Количество(), "ЧГ=") + "</operation_end>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Добавление группировочных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями;
//            РежимТестирования – Булево – Режим тестирования (для совместимости)
// Примечания: Группировочные показатели используют формулы суммирования других показателей
Процедура Добавить_Группировочные_Показатели_в_ТЗ(ТЗ, Знач РежимТестирования = Ложь)

	#region row_1_totals

	// Строка 1: Кредитные суммы, в том числе
	// Формула: сумма строк 2-7

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр2кол3,ГР_32_01_2025_стр3кол3,ГР_32_01_2025_стр4кол3,ГР_32_01_2025_стр5кол3,ГР_32_01_2025_стр6кол3,ГР_32_01_2025_стр7кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр2кол4,ГР_32_01_2025_стр3кол4,ГР_32_01_2025_стр4кол4,ГР_32_01_2025_стр5кол4,ГР_32_01_2025_стр6кол4,ГР_32_01_2025_стр7кол4";

	#endregion

	#region row_8_totals

	// Строка 8: Кредитные обязательства, в том числе
	// Формула: сумма строк 9-12

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 8;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр9кол3,ГР_32_01_2025_стр10кол3,ГР_32_01_2025_стр11кол3,ГР_32_01_2025_стр12кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 8;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр9кол4,ГР_32_01_2025_стр10кол4,ГР_32_01_2025_стр11кол4,ГР_32_01_2025_стр12кол4";

	#endregion

	#region row_13_totals

	// Строка 13: Всего
	// Формула: строка 1 + строка 8

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 13;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр1кол3,ГР_32_01_2025_стр8кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 13;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр1кол4,ГР_32_01_2025_стр8кол4";

	#endregion

	#region column_7_totals

	// Колонка 7: Итого для всех строк
	// Формула: сумма колонок 3, 4, 5, 6

	// Строка 1, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр1кол3,ГР_32_01_2025_стр1кол4";

	// Строка 2, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр2кол3,ГР_32_01_2025_стр2кол4";

	// Строка 3, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 3;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр3кол3,ГР_32_01_2025_стр3кол4";

	// Строка 4, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 4;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр4кол3,ГР_32_01_2025_стр4кол4";

	// Строка 5, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 5;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр5кол3,ГР_32_01_2025_стр5кол4";

	// Строка 6, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 6;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр6кол3,ГР_32_01_2025_стр6кол4";

	// Строка 7, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 7;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр7кол3,ГР_32_01_2025_стр7кол4";

	// Строка 8, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 8;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр8кол3,ГР_32_01_2025_стр8кол4";

	// Строка 9, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 9;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр9кол3,ГР_32_01_2025_стр9кол4";

	// Строка 10, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 10;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр10кол3,ГР_32_01_2025_стр10кол4";

	// Строка 11, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 11;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр11кол3,ГР_32_01_2025_стр11кол4";

	// Строка 12, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр12кол3,ГР_32_01_2025_стр12кол4";

	// Строка 13, колонка 7
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 13;
	стрк.НомерКолонки = 7;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_32_01_2025_стр13кол3,ГР_32_01_2025_стр13кол4";

	#endregion

КонецПроцедуры

// Назначение: Создание группировочных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей;
//            РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений
Процедура СоздатьГруппировочныеПоказателиИзТЗ(ТЗ, Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region loop_processing

	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл

		стрк = ТЗ[Счетчик];

		Идентификатор = "ГР_32_01_2025_стр" + Формат(стрк.НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(стрк.НомерКолонки, "ЧГ=;ЧРГ=");

		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,
			стрк.ТипПоказателяОтчета,
			"",
			стрк.СписокИспользуемыхПоказателей,
			Неопределено,
			ВыводитьСообщения,
			"",
			"",
			1
		);

	КонецЦикла;

	#endregion

КонецПроцедуры

#КонецОбласти

#Область ВычислениеПоказателей

// Назначение: Публичная функция для вычисления показателя по номеру строки и колонки
// Параметры: НомерСтроки – Число – Номер строки отчета;
//            НомерКолонки – Число – Номер колонки отчета;
//            ДатаОстатка – Дата – Дата для расчета остатка;
//            СтруктураПараметров – Структура – Параметры расчета (Организация и др.);
//            ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений;
//            РежимТестирования – Булево – Режим тестирования
// Возвращаемое: Число – Вычисленное значение показателя
// Примечания: Диспетчер вызова специализированных функций вычисления
Функция ВычислитьПоказатель(НомерСтроки, НомерКолонки, _НачалоПериода, _КонецПериода, СтруктураПараметров, Знач ВыводитьСообщения = Ложь, Знач РежимТестирования = Ложь) Экспорт

	#region initialization

	мСтруктураПараметров = СтруктураПараметров;
	мВыводитьСообщения = Истина;
	мРежимТестирования = РежимТестирования;
	мНачалоПериода = _НачалоПериода;
	мКонецПериода = _КонецПериода;

	#endregion

	#region calculation_dispatch
	
	Выполнить("ВычислитьПоказатель_стр"+НомерСтроки+"кол"+НомерКолонки+"()");

	#endregion

	#region result_formation

	Возврат мЗначениеПоказателя;

	#endregion

КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СчетПоКоду(Код)
	
	сч = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Код);
	Если НЕ ЗначениеЗаполнено(сч) или сч = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		сообщить("Не найден счет по коду "+строка(Код));
	Иначе
		Возврат сч;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Назначение: Вычисление показателя "Заемные деньги" на отчетную дату
// Возвращаемое: Число – Сумма остатков по счетам
// Примечания: Счета: 71503.331, 71504.421, 71505.341, 71506.431 (или 72503, 72504, 72505, 72506)
// Производительность: Выполняет запрос к БД для получения остатков
Функция ВычислитьПоказатель_стр2кол3()

	#region initialization

	ЗначениеПоказателя = 0;
	МассивСчетов = Новый Массив;

	#endregion

	#region accounts_initialization

	МассивСчетов.Добавить(СчетПоКоду("71503.331"));
	МассивСчетов.Добавить(СчетПоКоду("71504.421"));
	МассивСчетов.Добавить(СчетПоКоду("71505.341"));
	МассивСчетов.Добавить(СчетПоКоду("71506.431"));

	МассивСчетов.Добавить(СчетПоКоду("72503.331"));
	МассивСчетов.Добавить(СчетПоКоду("72504.421"));
	МассивСчетов.Добавить(СчетПоКоду("72505.341"));
	МассивСчетов.Добавить(СчетПоКоду("72506.431"));

	#endregion

	#region calculation

	Для Каждого СчетСсылка Из МассивСчетов Цикл

		Если ЗначениеЗаполнено(СчетСсылка) Тогда

			ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
				мКонецПериода,
				Ложь
			);
			
			ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

			Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Оборот: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
			
		Иначе
			сообщить("не найден счет!");
		
		КонецЕсли;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр2кол3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Заемные деньги" на начало года
// Возвращаемое: Число – Сумма остатков по счетам
// Примечания: Счета: 71503.332, 71504.422, 71505.342, 71506.432 (или 72503, 72504, 72505, 72506)
// Производительность: Выполняет запрос к БД для получения остатков
Функция ВычислитьПоказатель_стр2кол4()

	#region initialization

	ЗначениеПоказателя = 0;
	МассивСчетов = Новый Массив;

	#endregion

	#region accounts_initialization

	МассивСчетов.Добавить(СчетПоКоду("71503.332"));
	МассивСчетов.Добавить(СчетПоКоду("71504.422"));
	МассивСчетов.Добавить(СчетПоКоду("71505.342"));
	МассивСчетов.Добавить(СчетПоКоду("71506.432"));
	
	МассивСчетов.Добавить(СчетПоКоду("72503.332"));
	МассивСчетов.Добавить(СчетПоКоду("72504.422"));
	МассивСчетов.Добавить(СчетПоКоду("72505.342"));
	МассивСчетов.Добавить(СчетПоКоду("72506.432"));
	
	#endregion

	#region calculation

	Для Каждого СчетСсылка Из МассивСчетов Цикл

		Если ЗначениеЗаполнено(СчетСсылка) Тогда

			ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
				мКонецПериода,
				Ложь
			);
			ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

			Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
		КонецЕсли;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр2кол4 (Заемные деньги на начало года): " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Параметры:
//	Организация - спр ссылка
//	СчетСсылка - план счетов Хозрасчетный
//	МассивСсылок - массив - ссылки на субконто
//	_НачалоПериода - дата
//	_КонецПериода - дата
//	ЭтоДебетовыйОборот - булево - управляет видом оборота: по Дт или по Кт
//
Функция ОборотыПоСчету(Организация, СчетСсылка, МассивСсылок, _НачалоПериода, _КонецПериода
	//, ЭтоДебетовыйОборот=Истина) 
	) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборот) КАК СуммаОборот,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт) КАК ВалютнаяСуммаОборотДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт) КАК ВалютнаяСуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстаткиИОбороты";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(_НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(_КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0  Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Если ЭтоДебетовыйОборот Тогда
		//
		//	возврат ВыборкаДетальныеЗаписи.СуммаОборотДт;
		//
		//Иначе
		//	
		//	возврат ВыборкаДетальныеЗаписи.СуммаОборотКт;
		//КонецЕсли;
		возврат ВыборкаДетальныеЗаписи.СуммаОборот;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Назначение: Получение остатка по счету с учетом субконто
// Параметры: Организация – СправочникСсылка – Ссылка на организацию;
//            СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет бухгалтерии;
//            МассивСсылок – Массив – Массив ссылок на субконто;
//            ДатаОстатка – Дата – Дата для расчета остатка;
//            ЭтоОстатокНаНачало – Булево – Флаг вида остатка
// Возвращаемое: Число – Сумма остатка
Функция ОстатокПоСчету(Организация, СчетСсылка, МассивСсылок, ДатаОстатка, ЭтоОстатокНаНачало = Истина) Экспорт

	#region initialization

	Если ЭтоОстатокНаНачало = Истина Тогда

		Граница = Новый Граница(НачалоДня(ДатаОстатка), ВидГраницы.Исключая);

	ИначеЕсли ЭтоОстатокНаНачало = Ложь Тогда

		Граница = Новый Граница(КонецДня(ДатаОстатка), ВидГраницы.Включая);

	КонецЕсли;

	#endregion

	#region database_query

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютнаяСуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатка,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0 Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	#endregion

	#region loop_processing

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат -1*ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Возврат 0;
	
	#endregion
              
КонецФункции

#КонецОбласти

мВыводитьСообщения = истина;

