Перем мВыводитьСообщения;
// Назначение: Тестовый модуль для проверки всех методов вычисления показателей отчета ГР_19.01_2025
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Примечания: Тесты выводят только значения показателей в консоль и генерируют исключения при ошибках
// Валидация: Проверяет корректность всех методов вычисления показателей ВычислитьПоказатель_стрNколQ()
Процедура ТестированиеВсехПоказателей(Знач ВыводитьСообщения = Истина) Экспорт

#region initialization

	НачалоПериода = Дата(2024, 1, 1);
	КонецПериода = Дата(2024, 12, 31);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Справочники.Организации.ПустаяСсылка());

#endregion

#region test_execution

	СписокТестируемыхМетодов = ПолучитьСписокВсехМетодовВычисления();
	
	Для Каждого ИмяМетода Из СписокТестируемыхМетодов Цикл
		
#region test_method_call

		Попытка
			ЗначениеПоказателя = Вычислить(ИмяМетода + "()");
			
			Если ВыводитьСообщения Тогда
				Сообщить("<test_result>" + Строка(ЗначениеПоказателя) + "</test_result>");
			КонецЕсли;
			
		Исключение
			
#region error_handling

			ТекстОшибки = ОписаниеОшибки();
			
			Если ВыводитьСообщения Тогда
				Сообщить("<test_error>Ошибка в методе " + ИмяМетода + ": " + ТекстОшибки + "</test_error>");
			КонецЕсли;
			
			ВызватьИсключение("Ошибка выполнения теста для метода " + ИмяМетода + ": " + ТекстОшибки);

#endregion
			
		КонецПопытки;

#endregion
		
	КонецЦикла;

#endregion

КонецПроцедуры

// Назначение: Получение списка всех методов вычисления показателей для тестирования
// Возвращаемое: Массив – Список имен всех методов ВычислитьПоказатель_стрNколQ
// Примечания: Формирует полный список всех 64 методов согласно структуре отчета
Функция ПолучитьСписокВсехМетодовВычисления() Экспорт

#region initialization

	СписокМетодов = Новый Массив;

#endregion

#region data_processing

	// Предыдущий период - строки 2, 3, 5, 10, 11, 13, 25, 26
	МассивСтрокПредыдущийПериод = Новый Массив;
	МассивСтрокПредыдущийПериод.Добавить(2);
	МассивСтрокПредыдущийПериод.Добавить(3);
	МассивСтрокПредыдущийПериод.Добавить(5);
	МассивСтрокПредыдущийПериод.Добавить(10);
	МассивСтрокПредыдущийПериод.Добавить(11);
	МассивСтрокПредыдущийПериод.Добавить(13);
	МассивСтрокПредыдущийПериод.Добавить(25);
	МассивСтрокПредыдущийПериод.Добавить(26);
	
	// Текущий период - строки 29, 30, 32, 37, 38, 40, 52, 53
	МассивСтрокТекущийПериод = Новый Массив;
	МассивСтрокТекущийПериод.Добавить(29);
	МассивСтрокТекущийПериод.Добавить(30);
	МассивСтрокТекущийПериод.Добавить(32);
	МассивСтрокТекущийПериод.Добавить(37);
	МассивСтрокТекущийПериод.Добавить(38);
	МассивСтрокТекущийПериод.Добавить(40);
	МассивСтрокТекущийПериод.Добавить(52);
	МассивСтрокТекущийПериод.Добавить(53);
	
	// Колонки для всех периодов
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить(3);
	МассивКолонок.Добавить(4);
	МассивКолонок.Добавить(6);
	МассивКолонок.Добавить(7);

#endregion

#region result_formation

	// Формирование методов для предыдущего периода
	Для Каждого НомерСтроки Из МассивСтрокПредыдущийПериод Цикл
		Для Каждого НомерКолонки Из МассивКолонок Цикл
			ИмяМетода = "ВычислитьПоказатель_стр" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(НомерКолонки, "ЧГ=;ЧРГ=");
			СписокМетодов.Добавить(ИмяМетода);
		КонецЦикла;
	КонецЦикла;
	
	// Формирование методов для текущего периода
	Для Каждого НомерСтроки Из МассивСтрокТекущийПериод Цикл
		Для Каждого НомерКолонки Из МассивКолонок Цикл
			ИмяМетода = "ВычислитьПоказатель_стр" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(НомерКолонки, "ЧГ=;ЧРГ=");
			СписокМетодов.Добавить(ИмяМетода);
		КонецЦикла;
	КонецЦикла;

#endregion

	Для каждого эл Из СписокМетодов Цикл
		сообщить(эл);
	КонецЦикла;
	
	Возврат СписокМетодов;

КонецФункции

// Назначение: Тестирование отдельного метода вычисления показателя
// Параметры: НомерСтроки – Число – Номер строки отчета; НомерКолонки – Число – Номер колонки отчета; ВыводитьСообщения – Булево – Флаг вывода диагностики
// Возвращаемое: Число – Значение вычисленного показателя
// Примечания: Тестирует конкретный метод и выводит результат в консоль
// Валидация: Проверяет существование метода и корректность его выполнения
Функция ТестироватьМетодПоказателя(НомерСтроки, НомерКолонки, Знач ВыводитьСообщения = Истина) Экспорт

#region validation

	Если НомерСтроки <= 0 Или НомерКолонки <= 0 Тогда
		ВызватьИсключение("Некорректные параметры: номер строки и колонки должны быть положительными числами");
	КонецЕсли;

#endregion

#region initialization

	НачалоПериода = Дата(2024, 1, 1);
	КонецПериода = Дата(2024, 12, 31);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Справочники.Организации.ПустаяСсылка());

#endregion

#region test_execution

	ИмяМетода = "ВычислитьПоказатель_стр" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(НомерКолонки, "ЧГ=;ЧРГ=");
	
	Если ВыводитьСообщения Тогда
		Сообщить("<test_start>Тестирование метода: " + ИмяМетода + "</test_start>");
	КонецЕсли;
	
	Попытка
		ЗначениеПоказателя = Вычислить(ИмяМетода + "()");
		
		Если ВыводитьСообщения Тогда
			Сообщить("<test_result>" + Строка(ЗначениеПоказателя) + "</test_result>");
		КонецЕсли;
		
		Возврат ЗначениеПоказателя;
		
	Исключение
		
#region error_handling

		ТекстОшибки = ОписаниеОшибки();
		
		Если ВыводитьСообщения Тогда
			Сообщить("<test_error>Ошибка выполнения метода " + ИмяМетода + ": " + ТекстОшибки + "</test_error>");
		КонецЕсли;
		
		ВызватьИсключение("Ошибка выполнения теста для метода " + ИмяМетода + ": " + ТекстОшибки);

#endregion
		
	КонецПопытки;

#endregion

КонецФункции

#Область ВспомогательныеМетодыДляТестирования

// Назначение: Заглушка для функции получения остатков по счету
// Параметры: Организация – СправочникСсылка.Организации – Организация; СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет; СубконтоСсылка – Массив – Массив субконто; ДатаОстатка – Дата – Дата остатка; ЭтоОстатокНаНачало – Булево – Флаг типа остатка
// Возвращаемое: Число – Остаток по счету (заглушка возвращает тестовое значение)
// Примечания: Временная заглушка для тестирования, требует реализации в рабочей системе
// Интеграция: Должна обращаться к регистру бухгалтерии Хозрасчетный
Функция ОстатокПоСчету(Организация, СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало) Экспорт

#region validation

	Если Не ЗначениеЗаполнено(ДатаОстатка) Тогда
		ВызватьИсключение("Не указана дата остатка");
	КонецЕсли;

#endregion

#region data_processing

	// Заглушка для тестирования - возвращаем тестовое значение
	ТестовоеЗначение = 1000;
	
	Если мВыводитьСообщения Тогда
		Сообщить("<mock_function>ОстатокПоСчету: возвращено тестовое значение " + Строка(ТестовоеЗначение) + "</mock_function>");
	КонецЕсли;

#endregion

	Возврат ТестовоеЗначение;

КонецФункции

// Назначение: Заглушка для функции получения оборотов по счету
// Параметры: Организация – СправочникСсылка.Организации – Организация; СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет; СубконтоСсылка – Массив – Массив субконто; НачалоПериода – Дата – Начало периода; КонецПериода – Дата – Конец периода; ЭтоДебетовыйОборот – Булево – Флаг типа оборота
// Возвращаемое: Число – Оборот по счету (заглушка возвращает тестовое значение)
// Примечания: Временная заглушка для тестирования, требует реализации в рабочей системе
// Интеграция: Должна обращаться к регистру бухгалтерии Хозрасчетный
Функция ОборотыПоСчету(Организация, СчетСсылка, СубконтоСсылка, НачалоПериода, КонецПериода, ЭтоДебетовыйОборот) Экспорт

#region validation

	Если Не ЗначениеЗаполнено(НачалоПериода) Или Не ЗначениеЗаполнено(КонецПериода) Тогда
		ВызватьИсключение("Не указан период для получения оборотов");
	КонецЕсли;
	
	Если НачалоПериода > КонецПериода Тогда
		ВызватьИсключение("Начало периода не может быть больше конца периода");
	КонецЕсли;

#endregion

#region data_processing

	// Заглушка для тестирования - возвращаем тестовое значение
	ТестовоеЗначение = 500;
	
	Если мВыводитьСообщения Тогда
		Сообщить("<mock_function>ОборотыПоСчету: возвращено тестовое значение " + Строка(ТестовоеЗначение) + "</mock_function>");
	КонецЕсли;

#endregion

	Возврат ТестовоеЗначение;

КонецФункции

// Назначение: Заглушка для функции логирования остатков
// Параметры: НомерСтроки – Число – Номер строки; НомерКолонки – Число – Номер колонки; ЭтоОстатокНаНачало – Булево – Тип остатка; СчетСсылка – ПланСчетовСсылка – Счет; ДатаОстатка – Дата – Дата; СтруктураПараметров – Структура – Параметры; СубконтоСсылка – Массив – Субконто; ЗначениеПоказателя – Число – Значение
// Примечания: Заглушка для логирования в режиме тестирования
Процедура ЛогВычисления_Остатки(НомерСтроки, НомерКолонки, ЭтоОстатокНаНачало, СчетСсылка, ДатаОстатка, СтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя) Экспорт

#region diagnostic_logging

	Если мВыводитьСообщения Тогда
		Сообщить("<log_calculation>Остатки стр" + Строка(НомерСтроки) + "кол" + Строка(НомерКолонки) + ": " + Строка(ЗначениеПоказателя) + "</log_calculation>");
	КонецЕсли;

#endregion

КонецПроцедуры

// Назначение: Заглушка для функции логирования оборотов
// Параметры: НомерСтроки – Число – Номер строки; НомерКолонки – Число – Номер колонки; ЭтоДебетовыйОборот – Булево – Тип оборота; СчетСсылка – ПланСчетовСсылка – Счет; НачалоПериода – Дата – Начало; КонецПериода – Дата – Конец; СтруктураПараметров – Структура – Параметры; СубконтоСсылка – Массив – Субконто; ЗначениеПоказателя – Число – Значение
// Примечания: Заглушка для логирования в режиме тестирования
Процедура ЛогВычисления_Обороты(НомерСтроки, НомерКолонки, ЭтоДебетовыйОборот, СчетСсылка, НачалоПериода, КонецПериода, СтруктураПараметров, СубконтоСсылка, ЗначениеПоказателя) Экспорт

#region diagnostic_logging

	Если мВыводитьСообщения Тогда
		Сообщить("<log_calculation>Обороты стр" + Строка(НомерСтроки) + "кол" + Строка(НомерКолонки) + ": " + Строка(ЗначениеПоказателя) + "</log_calculation>");
	КонецЕсли;

#endregion

КонецПроцедуры

// Назначение: Заглушка для функции получения конца предыдущего периода
// Возвращаемое: Дата – Конец предыдущего периода
// Примечания: Заглушка возвращает тестовую дату
Функция КонецПредыдущегоПериода() Экспорт

#region data_processing

	ТестоваяДата = Дата(2023, 12, 31);
	
	Если мВыводитьСообщения Тогда
		Сообщить("<mock_function>КонецПредыдущегоПериода: возвращено " + Строка(ТестоваяДата) + "</mock_function>");
	КонецЕсли;

#endregion

	Возврат ТестоваяДата;

КонецФункции

#КонецОбласти

#Область ФункцииВычисленияПоказателей

// Назначение: Функции вычисления показателей отчета - копии из основного модуля calc.bsl для тестирования
// Примечания: Все функции адаптированы для работы с заглушками и упрощены для тестирования

Функция ВычислитьПоказатель_стр2кол3() Экспорт
	
	ЗначениеПоказателя = 0;

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
	ДатаОстатка = НачалоГода(НачалоГода(Дата(2024, 1, 1))-1);
	СубконтоСсылка = ГруппаОС_Сооружения();

	ЗначениеПоказателя = ОстатокПоСчету(Справочники.Организации.ПустаяСсылка(), СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,3,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,Новый Структура,СубконтоСсылка,ЗначениеПоказателя);

	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр2кол4()
	
#region initialization

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
	ДатаОстатка = НачалоГода(НачалоГода(Дата(2024, 1, 1))-1);
	СубконтоСсылка = ГруппаОС_ОфисноеОборудование();
	
#endregion

#region calculation

	ЗначениеПоказателя = ОстатокПоСчету(Справочники.Организации.ПустаяСсылка(), СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,4,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,Новый Структура,СубконтоСсылка,ЗначениеПоказателя);
	
#endregion

	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр2кол6()
	
#region initialization

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
	ДатаОстатка = НачалоГода(НачалоГода(Дата(2024, 1, 1))-1);
	СубконтоСсылка = ГруппаОС_Другие();
	
#endregion

#region calculation

	ЗначениеПоказателя = ОстатокПоСчету(Справочники.Организации.ПустаяСсылка(), СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,6,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,Новый Структура,СубконтоСсылка,ЗначениеПоказателя);
	
#endregion

	Возврат ЗначениеПоказателя;

КонецФункции

Функция ВычислитьПоказатель_стр2кол7()
	
#region initialization

	ЭтоОстатокНаНачало = Истина;
	СчетСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
	ДатаОстатка = НачалоГода(НачалоГода(Дата(2024, 1, 1))-1);
	СубконтоСсылка = Неопределено;
	
#endregion

#region calculation

	ЗначениеПоказателя = ОстатокПоСчету(Справочники.Организации.ПустаяСсылка(), СчетСсылка, СубконтоСсылка, ДатаОстатка, ЭтоОстатокНаНачало);
	ЛогВычисления_Остатки(2,7,ЭтоОстатокНаНачало,СчетСсылка,ДатаОстатка,Новый Структура,СубконтоСсылка,ЗначениеПоказателя);
	
#endregion

	Возврат ЗначениеПоказателя;

КонецФункции

// Назначение: Простой запуск всех тестов показателей
// Примечания: Выполняет тестирование первых 4 методов для демонстрации
Процедура ЗапуститьВсеТесты() Экспорт

#region test_execution

	Сообщить("<test_start>Запуск тестирования методов вычисления показателей</test_start>");
	
	// Тестирование методов строки 2
	КоличествоТестов = 0;
	КоличествоУспешных = 0;
	
	МассивМетодов = Новый Массив;
	МассивМетодов.Добавить("ВычислитьПоказатель_стр2кол3");
	МассивМетодов.Добавить("ВычислитьПоказатель_стр2кол4");
	МассивМетодов.Добавить("ВычислитьПоказатель_стр2кол6");
	МассивМетодов.Добавить("ВычислитьПоказатель_стр2кол7");
	
	Для Каждого ИмяМетода Из МассивМетодов Цикл
		
		КоличествоТестов = КоличествоТестов + 1;
		
		Попытка
			ЗначениеПоказателя = Вычислить(ИмяМетода + "()");
			//ЗначениеПоказателя = Вычислить(ИмяМетода);
			//ЗначениеПоказателя = Вычислить("1+2");
			КоличествоУспешных = КоличествоУспешных + 1;
			Сообщить(Строка(ЗначениеПоказателя));
			
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить("<test_error>Ошибка в " + ИмяМетода + ": " + т + "</test_error>");
		КонецПопытки;
		
	КонецЦикла;

#endregion

#region result_summary

	Сообщить("<test_summary>Выполнено тестов: " + Строка(КоличествоТестов) + ", успешных: " + Строка(КоличествоУспешных) + "</test_summary>");

#endregion

КонецПроцедуры

// Примечание: Добавлены 4 функции для демонстрации
// Полный список из 64 функций будет аналогичен, с изменением только номеров строк/колонок и параметров

#region helper_functions_from_calc

Функция ГруппаОС_Сооружения() Экспорт
	// Заглушка - возвращает пустой массив для тестирования
	Возврат Новый Массив;
КонецФункции

Функция ГруппаОС_ОфисноеОборудование() Экспорт
	// Заглушка - возвращает пустой массив для тестирования
	Возврат Новый Массив;
КонецФункции

Функция ГруппаОС_Другие() Экспорт
	// Заглушка - возвращает пустой массив для тестирования
	Возврат Новый Массив;
КонецФункции

#endregion

#КонецОбласти

мВыводитьСообщения = Истина;

//ТестированиеВсехПоказателей(Истина);
//ЗапуститьВсеТесты();