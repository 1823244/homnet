// Отчет ГР_40.01_2025

Перем ИмяГруппы;
Перем мНачалоПериода;
Перем мКонецПериода;
Перем мСтруктураПараметров;
Перем мВыводитьСообщения;
Перем мЗначениеПоказателя;
Перем мРежимТестирования;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.5");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Отчет40012025");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Отчет 40.01_2025");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);

	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
		"Открыть форму : Отчет 40.01_2025",
		"Форма_Отчет40012025",
		ТипКоманды,
		Ложь) ;
		
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды,
		"Создать (обновить) показатели",
		"СоздатьОбновитьПоказатели",
		ТипКоманды,
		Ложь) ;

	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "СоздатьОбновитьПоказатели" Тогда
		СоздатьОбновитьПоказатели(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПоказателей

// Назначение: Основная процедура запуска создания всех показателей отчета ГР_40.01_2025
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений;
//            РежимТестирования – Булево – Режим тестирования (используются тестовые данные)
// Операции с БД: Создание группы показателей, массовое создание элементов справочника
// Валидация: Проверка существования группы и показателей
Процедура СоздатьОбновитьПоказатели(Знач ВыводитьСообщения = Истина, Знач РежимТестирования = Ложь) Экспорт

	#region initialization

	ИмяГруппы = "ГР_40_01_2025";

	Если ВыводитьСообщения Тогда

		Если РежимТестирования Тогда
			Сообщить("<operation_start>Начало создания показателей отчета ГР_40.01_2025 (РЕЖИМ ТЕСТИРОВАНИЯ)</operation_start>");
		Иначе
			Сообщить("<operation_start>Начало создания показателей отчета ГР_40.01_2025</operation_start>");
		КонецЕсли;

	КонецЕсли;

	#endregion

	#region group_preparation

	СоздатьГруппуПоказателей(ВыводитьСообщения);
	ПометитьВсеПоказателиНаУдаление(ВыводитьСообщения);

	#endregion

	#region indicators_creation

	СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор(РежимТестирования, ВыводитьСообщения);
	СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор(РежимТестирования, ВыводитьСообщения);

	#endregion

	#region operation_completion

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание показателей отчета ГР_40.01_2025</operation_end>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Создание группы показателей
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Создание элемента справочника-группы
// Валидация: Проверка существования группы перед созданием
Процедура СоздатьГруппуПоказателей(Знач ВыводитьСообщения = Ложь)

	#region initialization

	Идентификатор = ИмяГруппы;
	НаименованиеГруппы = ИмяГруппы;

	#endregion

	#region validation

	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеГруппы, Истина);

	#endregion

	#region group_creation

	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда

		ГруппаОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьГруппу();
		ГруппаОбъект.Идентификатор = Идентификатор;
		ГруппаОбъект.Наименование = НаименованиеГруппы;
		ГруппаОбъект.Записать();

		Если ВыводитьСообщения Тогда
			Сообщить("<data_summary>Создана группа показателей: " + НаименованиеГруппы + "</data_summary>");
		КонецЕсли;

	Иначе

		Если ВыводитьСообщения Тогда
			Сообщить("<validation_result>Группа показателей уже существует: " + НаименованиеГруппы + "</validation_result>");
		КонецЕсли;

	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Пометка всех показателей группы на удаление
// Параметры: ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
// Операции с БД: Обновление пометки удаления элементов справочника
// Производительность: Пакетная обработка через запрос
Процедура ПометитьВсеПоказателиНаУдаление(Знач ВыводитьСообщения = Ложь)

	#region database_query

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	хн_нфо_ПоказателиОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.хн_нфо_ПоказателиОтчета КАК хн_нфо_ПоказателиОтчета
	|ГДЕ
	|	хн_нфо_ПоказателиОтчета.Родитель = &Родитель
	|	И НЕ хн_нфо_ПоказателиОтчета.ПометкаУдаления";

	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда
		ВызватьИсключение "Группа не найдена: " + ИмяГруппы;
	КонецЕсли;
	Запрос.УстановитьПараметр("Родитель", ГруппаСсылка);

	Результат = Запрос.Выполнить();

	#endregion

	#region loop_processing

	КоличествоПомеченных = 0;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл

		ПоказательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.ПометкаУдаления = Истина;
		ПоказательОбъект.Записать();
		КоличествоПомеченных = КоличествоПомеченных + 1;

	КонецЦикла;

	#endregion

	#region result_formation

	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Помечено на удаление показателей: " + КоличествоПомеченных + "</data_summary>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Создание или обновление показателя в справочнике
// Параметры: Идентификатор – Строка – Уникальный идентификатор показателя;
//            НаименованиеПоказателя – Строка – Наименование показателя;
//            ВидПоказателя – ПеречислениеСсылка.хн_нфо_ВидыПоказателейОтчета – Вид показателя;
//            ТипПоказателяОтчета – ПеречислениеСсылка.хн_нфо_ТипПоказателяОтчета – Тип показателя;
//            ОписаниеПоказателя – Строка – Описание показателя;
//            СписокИспользуемыхПоказателей – Строка – Список показателей через запятую;
//            ЗначениеОтбора – Произвольный – Значение отбора;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений;
//            ТекстКода – Строка – Текст программного кода;
//            Формула – Строка – Формула расчета;
//            Множитель – Число – Множитель для расчета
// Операции с БД: Создание или обновление элемента справочника показателей
Процедура СоздатьИлиОбновитьПоказатель(
	Идентификатор,
	НаименованиеПоказателя,
	ВидПоказателя,
	ТипПоказателяОтчета,
	ОписаниеПоказателя,
	СписокИспользуемыхПоказателей = "",
	ЗначениеОтбора = Неопределено,
	Знач ВыводитьСообщения = Ложь,
	ТекстКода = "",
	Формула = "",
	Множитель = 1)

	#region validation

	ГруппаСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяГруппы, Истина);
	Если НЕ ЗначениеЗаполнено(ГруппаСсылка) Тогда

		Если ВыводитьСообщения Тогда
			Сообщить("<error_details>Ошибка: Группа " + ИмяГруппы + " не найдена</error_details>");
		КонецЕсли;
		Возврат;

	КонецЕсли;

	ПоказательСсылка = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(НаименованиеПоказателя, Истина);

	#endregion

	#region indicator_creation

	Если НЕ ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ПоказательОбъект = Справочники.хн_нфо_ПоказателиОтчета.СоздатьЭлемент();
	Иначе
		ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	КонецЕсли;

	#endregion

	#region data_processing

	ПоказательОбъект.Наименование = НаименованиеПоказателя;
	ПоказательОбъект.Родитель = ГруппаСсылка;

	ПоказательОбъект.Идентификатор = Идентификатор;
	ПоказательОбъект.ВидПоказателя = ВидПоказателя;
	ПоказательОбъект.Формула = Формула;
	ПоказательОбъект.ОписаниеПоказателя = ОписаниеПоказателя;
	ПоказательОбъект.НеВыводитьВОтчет = Ложь;
	ПоказательОбъект.ТекстКода = ТекстКода;
	ПоказательОбъект.Множитель = Множитель;
	ПоказательОбъект.ВалютаПоказателя = Undefined;

	ПоказательОбъект.ФорматДаты = "";
	ПоказательОбъект.ТипРегистратора = "";
	ПоказательОбъект.ТипПоказателяОтчета = ТипПоказателяОтчета;

	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле Тогда

		ПоказательОбъект.Регистр = "";
		ПоказательОбъект.Ресурс = "";
		ПоказательОбъект.ТипПоказателя = 1;

	Иначе

		ПоказательОбъект.ТипПоказателя = 0;
		ПоказательОбъект.Регистр = "Хозрасчетный";

		Если ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаНачало Тогда
			ПоказательОбъект.Ресурс = "СуммаНачальныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец Тогда
			ПоказательОбъект.Ресурс = "СуммаКонечныйОстаток";
		ИначеЕсли ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОборотЗаПериод Тогда
			ПоказательОбъект.Ресурс = "СуммаОборот";
		КонецЕсли;

	КонецЕсли;

	#endregion

	#region tabular_section_processing

	Если ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле
		И НЕ ПустаяСтрока(СписокИспользуемыхПоказателей) Тогда

		ПоказательОбъект.ИспользуемыеПоказатели.Очистить();

		МассивИмен = СтрРазделить(СписокИспользуемыхПоказателей, ",", Ложь);
		Для Каждого ИмяИспользуемого Из МассивИмен Цикл

			ИмяИспользуемого = СокрЛП(ИмяИспользуемого);
			ИспользуемыйПоказатель = Справочники.хн_нфо_ПоказателиОтчета.НайтиПоНаименованию(ИмяИспользуемого, Истина);

			Если ЗначениеЗаполнено(ИспользуемыйПоказатель) Тогда

				Если ИспользуемыйПоказатель.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ПоказательОбъект.ИспользуемыеПоказатели.Добавить();
				НоваяСтрока.Показатель = ИспользуемыйПоказатель;
				НоваяСтрока.Множитель = Множитель;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	#endregion

	#region database_write

	ПоказательОбъект.ПометкаУдаления = Ложь;
	ПоказательОбъект.Записать();

	#endregion

	#region result_formation

	Если ВыводитьСообщения Тогда
		Сообщить("<data_summary>Создан/обновлен показатель: " + НаименованиеПоказателя + "</data_summary>");
	КонецЕсли;

	#endregion

КонецПроцедуры

#Область СозданиеДетальныхПоказателей

// Назначение: Оркестратор создания всех детальных показателей отчета
// Параметры: РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
Процедура СоздатьВсеДетальныеПоказателиИзТЗ_Оркестратор(Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region initialization

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания детальных показателей</operation_start>");
	КонецЕсли;

	ТЗ = ПустаяТЗПоказателей();

	#endregion

	#region data_processing

	ДобавитьДетальныеПоказателиВТЗ(ТЗ, РежимТестирования);
	СоздатьДетальныеПоказателиИзТЗ(ТЗ, РежимТестирования, ВыводитьСообщения);

	#endregion

	#region operation_completion

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание детальных показателей. Всего: " + Формат(ТЗ.Количество(), "ЧГ=") + "</operation_end>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Создание пустой таблицы значений для хранения данных показателей
// Возвращаемое: ТаблицаЗначений – Пустая структура для показателей
Функция ПустаяТЗПоказателей()

	#region initialization

	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НомерКолонки");
	ТЗ.Колонки.Добавить("Идентификатор");
	ТЗ.Колонки.Добавить("НаименованиеПоказателя");
	ТЗ.Колонки.Добавить("ВидПоказателя");
	ТЗ.Колонки.Добавить("ТипПоказателяОтчета");
	ТЗ.Колонки.Добавить("ОписаниеПоказателя");
	ТЗ.Колонки.Добавить("СписокИспользуемыхПоказателей");
	ТЗ.Колонки.Добавить("ЗначениеОтбора");
	ТЗ.Колонки.Добавить("ТекстКода");
	ТЗ.Колонки.Добавить("Формула");
	ТЗ.Колонки.Добавить("Множитель");

	#endregion

	#region result_formation

	Возврат ТЗ;

	#endregion

КонецФункции

// Назначение: Формирование текста программного кода для детального показателя
// Параметры: НомерСтроки – Число – Номер строки в отчете;
//            НомерКолонки – Число – Номер колонки в отчете;
//            РежимТестирования – Булево – Режим тестирования
// Возвращаемое: Строка – Текст программного кода
Функция ТекстКодаДетальногоПоказателя(НомерСтроки, НомерКолонки, РежимТестирования = Ложь)

	#region initialization

	РежимТестированияСтрока = ?(РежимТестирования, "Истина", "Ложь");

	#endregion

	#region code_generation

	т = "
	|СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки
	|	.НайтиПоНаименованию(""Отчет40012025"", Истина);
    |ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаОбработчика);
	|ЗначениеПоказателя = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработчика)
	|	.ВычислитьПоказатель(" + Формат(НомерСтроки, "ЧГ=;ЧРГ=") + "," + Формат(НомерКолонки, "ЧГ=;ЧРГ=") + ", мНачалоПериода, мКонецПериода, СтруктураПараметров, Истина, " + РежимТестированияСтрока + ");
	|";

	#endregion

	#region result_formation

	Возврат т;

	#endregion

КонецФункции

// Назначение: Добавление детальных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями;
//            РежимТестирования – Булево – Режим тестирования (для совместимости)
// Примечания: Реализованы только показатели строки 2 (Заемные деньги). Остальные строки требуют уточнения счетов.
Процедура ДобавитьДетальныеПоказателиВТЗ(ТЗ, Знач РежимТестирования = Ложь)

	#region section_1_revenue_indicators

	// Строка 1: Сервисные сборы
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 1;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 2: Выручка от оказания услуг по листингу
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 2;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 3: Комиссионные доходы по организации торгов на фондовом рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 3;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 3;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 4: Комиссионные доходы по организации торгов на валютном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 4;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 4;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 5: Комиссионные доходы по организации торгов на срочном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 5;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 5;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 6: Комиссионные доходы по организации торгов на товарном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 6;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 6;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	#endregion

	#region section_2_registry_indicators

	// Строка 8: Выручка от оказания услуг по ведению реестра владельцев ценных бумаг
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 8;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 8;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 9: Выручка от оказания услуг зарегистрированным лицам
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 9;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 9;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 10: Выручка от приема-передачи системы ведения реестра
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 10;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 10;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 11: Выручка от оказания услуг по участию в общих собраниях акционеров
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 11;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 11;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 12: Выручка от оказания услуг, связанных с корпоративными действиями эмитента
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 12;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 13: Выручка от оказания услуг по подготовке выпусков ценных бумаг
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 13;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 13;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 14: Выручка от оказания услуг по выплате доходов по ценным бумагам
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 14;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 14;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	#endregion

	#region section_3_clearing_indicators

	// Строка 16: Выручка от оказания услуг клирингового обслуживания на фондовом рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 16;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 16;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 17: Выручка от оказания услуг клирингового обслуживания на валютном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 17;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 17;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 18: Выручка от оказания услуг клирингового обслуживания на срочном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 18;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 18;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 19: Выручка от оказания услуг клирингового обслуживания на товарном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 19;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 19;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 20: Выручка от оказания услуг клирингового обслуживания: сервисные сборы
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 20;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 20;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 21: Выручка от оказания репозитарных услуг
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 21;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	#endregion

	#region section_4_depository_indicators

	// Строка 23: Выручка от оказания услуг по ведению счетов депо, хранению и учету ценных бумаг
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 23;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 23;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 24: Выручка от оказания услуг по проведению операций по счетам депо
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 24;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 24;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 25: Выручка от оказания услуг расчетного депозитария
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 25;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 25;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 26: Выручка от оказания услуг по ответственному хранению ценных бумаг
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 26;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 27: Выручка от оказания услуг по учету финансовых инструментов
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 27;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 27;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 28: Выручка от оказания сопутствующих услуг по депозитарной деятельности
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 28;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 28;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	#endregion

	#region section_5_broker_indicators

	// Строка 30: Комиссионные доходы от клиентских операций на фондовом рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 30;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 30;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 31: Комиссионные доходы от клиентских операций на срочном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 31;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 31;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 32: Комиссионные доходы от клиентских операций на валютном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 32;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 32;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 33: Комиссионные доходы от клиентских операций на товарном рынке
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 33;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 33;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 34: Комиссионные доходы от прочих клиентских операций
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 34;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 34;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 35: Комиссионные доходы за перечисление денежных средств
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 35;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 35;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 36: Выручка от оказания услуг по размещению ценных бумаг
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 36;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 36;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	#endregion

	#region section_6_other_activities_indicators

	// Строка 38: Выручка от оказания услуг специализированного депозитария
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 38;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 38;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 39: Выручка от оказания услуг по доверительному управлению
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 39;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 39;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 40: Выручка от оказания услуг бюро кредитных историй
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 40;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 40;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 41: Выручка от оказания услуг кредитного рейтингового агентства
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 41;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 41;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 42: Выручка от оказания услуг страхового брокера
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 42;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 42;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 43: Выручка от оказания услуг оператора финансовых платформ
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 43;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 43;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 44: Выручка от оказания услуг оператора инвестиционных платформ
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 44;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 44;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 45: Выручка от оказания услуг оператора информационных систем
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 45;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 45;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	#endregion

	#region section_7_other_income_indicators

	// Строка 47: Агентское вознаграждение
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 47;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 47;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 48: Выручка от оказания услуг маркет-мейкера
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 48;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 48;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 49: Выручка от оказания услуг по обеспечению электронного документооборота
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 49;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 49;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 50: Выручка от оказания услуг по предоставлению доступа к программному обеспечению
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 50;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 50;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 51: Выручка от оказания информационных и консультационных услуг
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 51;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 51;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	// Строка 52: Прочее
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 52;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 52;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.ВидПоказателя = Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке;

	#endregion

КонецПроцедуры

// Назначение: Создание детальных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей;
//            РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений
Процедура СоздатьДетальныеПоказателиИзТЗ(ТЗ, Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region loop_processing

	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл

		стрк = ТЗ[Счетчик];

		Идентификатор = "ГР_40_01_2025_стр" + Формат(стрк.НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(стрк.НомерКолонки, "ЧГ=;ЧРГ=");

		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.ВычислениеНаВстроенномЯзыке,
			стрк.ТипПоказателяОтчета,
			"",
			"",
			Неопределено,
			ВыводитьСообщения,
			ТекстКодаДетальногоПоказателя(стрк.НомерСтроки, стрк.НомерКолонки, РежимТестирования),
			"",
			1
		);

	КонецЦикла;

	#endregion

КонецПроцедуры

#КонецОбласти

#Область СозданиеГруппировочныхПоказателей

// Назначение: Оркестратор создания всех группировочных показателей отчета
// Параметры: РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений
Процедура СоздатьВсеГруппировочныеПоказателиИзТЗ_Оркестратор(Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region initialization

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_start>Начало создания группировочных показателей</operation_start>");
	КонецЕсли;

	ТЗ = ПустаяТЗПоказателей();

	#endregion

	#region data_processing

	Добавить_Группировочные_Показатели_в_ТЗ(ТЗ, РежимТестирования);
	СоздатьГруппировочныеПоказателиИзТЗ(ТЗ, РежимТестирования, ВыводитьСообщения);

	#endregion

	#region operation_completion

	Если ВыводитьСообщения Тогда
		Сообщить("<operation_end>Завершено создание группировочных показателей. Всего: " + Формат(ТЗ.Количество(), "ЧГ=") + "</operation_end>");
	КонецЕсли;

	#endregion

КонецПроцедуры

// Назначение: Добавление группировочных показателей в таблицу значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица для заполнения показателями;
//            РежимТестирования – Булево – Режим тестирования (для совместимости)
// Примечания: Группировочные показатели используют формулы суммирования других показателей
Процедура Добавить_Группировочные_Показатели_в_ТЗ(ТЗ, Знач РежимТестирования = Ложь)

	#region section_1_totals
	// Строка 7: Итого по разделу I
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 7;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр1кол3,ГР_40_01_2025_стр2кол3,ГР_40_01_2025_стр3кол3,ГР_40_01_2025_стр4кол3,ГР_40_01_2025_стр5кол3,ГР_40_01_2025_стр6кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 7;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр1кол4,ГР_40_01_2025_стр2кол4,ГР_40_01_2025_стр3кол4,ГР_40_01_2025_стр4кол4,ГР_40_01_2025_стр5кол4,ГР_40_01_2025_стр6кол4";

	#endregion

	#region section_2_totals
	// Строка 15: Итого по разделу II
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр8кол3,ГР_40_01_2025_стр9кол3,ГР_40_01_2025_стр10кол3,ГР_40_01_2025_стр11кол3,ГР_40_01_2025_стр12кол3,ГР_40_01_2025_стр13кол3,ГР_40_01_2025_стр14кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 15;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр8кол4,ГР_40_01_2025_стр9кол4,ГР_40_01_2025_стр10кол4,ГР_40_01_2025_стр11кол4,ГР_40_01_2025_стр12кол4,ГР_40_01_2025_стр13кол4,ГР_40_01_2025_стр14кол4";

	#endregion

	#region section_3_totals
	// Строка 22: Итого по разделу III
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 22;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр16кол3,ГР_40_01_2025_стр17кол3,ГР_40_01_2025_стр18кол3,ГР_40_01_2025_стр19кол3,ГР_40_01_2025_стр20кол3,ГР_40_01_2025_стр21кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 22;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр16кол4,ГР_40_01_2025_стр17кол4,ГР_40_01_2025_стр18кол4,ГР_40_01_2025_стр19кол4,ГР_40_01_2025_стр20кол4,ГР_40_01_2025_стр21кол4";

	#endregion

	#region section_4_totals
	// Строка 29: Итого по разделу IV
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 29;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр23кол3,ГР_40_01_2025_стр24кол3,ГР_40_01_2025_стр25кол3,ГР_40_01_2025_стр26кол3,ГР_40_01_2025_стр27кол3,ГР_40_01_2025_стр28кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 29;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр23кол4,ГР_40_01_2025_стр24кол4,ГР_40_01_2025_стр25кол4,ГР_40_01_2025_стр26кол4,ГР_40_01_2025_стр27кол4,ГР_40_01_2025_стр28кол4";

	#endregion

	#region section_5_totals
	// Строка 37: Итого по разделу V
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 37;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр30кол3,ГР_40_01_2025_стр31кол3,ГР_40_01_2025_стр32кол3,ГР_40_01_2025_стр33кол3,ГР_40_01_2025_стр34кол3,ГР_40_01_2025_стр35кол3,ГР_40_01_2025_стр36кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 37;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр30кол4,ГР_40_01_2025_стр31кол4,ГР_40_01_2025_стр32кол4,ГР_40_01_2025_стр33кол4,ГР_40_01_2025_стр34кол4,ГР_40_01_2025_стр35кол4,ГР_40_01_2025_стр36кол4";

	#endregion

	#region section_6_totals
	// Строка 46: Итого по разделу VI
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 46;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр38кол3,ГР_40_01_2025_стр39кол3,ГР_40_01_2025_стр40кол3,ГР_40_01_2025_стр41кол3,ГР_40_01_2025_стр42кол3,ГР_40_01_2025_стр43кол3,ГР_40_01_2025_стр44кол3,ГР_40_01_2025_стр45кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 46;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр38кол4,ГР_40_01_2025_стр39кол4,ГР_40_01_2025_стр40кол4,ГР_40_01_2025_стр41кол4,ГР_40_01_2025_стр42кол4,ГР_40_01_2025_стр43кол4,ГР_40_01_2025_стр44кол4,ГР_40_01_2025_стр45кол4";

	#endregion

	#region section_7_totals
	// Строка 53: Итого по разделу VII
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 53;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр47кол3,ГР_40_01_2025_стр48кол3,ГР_40_01_2025_стр49кол3,ГР_40_01_2025_стр50кол3,ГР_40_01_2025_стр51кол3,ГР_40_01_2025_стр52кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 53;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр47кол4,ГР_40_01_2025_стр48кол4,ГР_40_01_2025_стр49кол4,ГР_40_01_2025_стр50кол4,ГР_40_01_2025_стр51кол4,ГР_40_01_2025_стр52кол4";

	#endregion

	#region grand_total
	// Строка 54: Всего
	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 54;
	стрк.НомерКолонки = 3;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр7кол3,ГР_40_01_2025_стр15кол3,ГР_40_01_2025_стр22кол3,ГР_40_01_2025_стр29кол3,ГР_40_01_2025_стр37кол3,ГР_40_01_2025_стр46кол3,ГР_40_01_2025_стр53кол3";

	стрк = ТЗ.Добавить();
	стрк.НомерСтроки = 54;
	стрк.НомерКолонки = 4;
	стрк.ТипПоказателяОтчета = Перечисления.хн_нфо_ТипПоказателяОтчета.ОстатокНаКонец;
	стрк.СписокИспользуемыхПоказателей = "ГР_40_01_2025_стр7кол4,ГР_40_01_2025_стр15кол4,ГР_40_01_2025_стр22кол4,ГР_40_01_2025_стр29кол4,ГР_40_01_2025_стр37кол4,ГР_40_01_2025_стр46кол4,ГР_40_01_2025_стр53кол4";

	#endregion

КонецПроцедуры

// Назначение: Создание группировочных показателей из таблицы значений
// Параметры: ТЗ – ТаблицаЗначений – Таблица с данными показателей;
//            РежимТестирования – Булево – Режим тестирования;
//            ВыводитьСообщения – Булево – Флаг вывода сообщений
Процедура СоздатьГруппировочныеПоказателиИзТЗ(ТЗ, Знач РежимТестирования = Ложь, Знач ВыводитьСообщения = Ложь)

	#region loop_processing

	Для Счетчик = 0 По ТЗ.Количество() - 1 Цикл

		стрк = ТЗ[Счетчик];

		Идентификатор = "ГР_40_01_2025_стр" + Формат(стрк.НомерСтроки, "ЧГ=;ЧРГ=") + "кол" + Формат(стрк.НомерКолонки, "ЧГ=;ЧРГ=");

		СоздатьИлиОбновитьПоказатель(
			Идентификатор,
			Идентификатор,
			Перечисления.хн_нфо_ВидыПоказателейОтчета.РасчетПоФормуле,
			стрк.ТипПоказателяОтчета,
			"",
			стрк.СписокИспользуемыхПоказателей,
			Неопределено,
			ВыводитьСообщения,
			"",
			"",
			1
		);

	КонецЦикла;

	#endregion

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВычислениеПоказателей

// Назначение: Публичная функция для вычисления показателя по номеру строки и колонки
// Параметры: НомерСтроки – Число – Номер строки отчета;
//            НомерКолонки – Число – Номер колонки отчета;
//            ДатаОстатка – Дата – Дата для расчета остатка;
//            СтруктураПараметров – Структура – Параметры расчета (Организация и др.);
//            ВыводитьСообщения – Булево – Флаг вывода диагностических сообщений;
//            РежимТестирования – Булево – Режим тестирования
// Возвращаемое: Число – Вычисленное значение показателя
// Примечания: Диспетчер вызова специализированных функций вычисления
Функция ВычислитьПоказатель(НомерСтроки, НомерКолонки, _НачалоПериода, _КонецПериода, СтруктураПараметров, Знач ВыводитьСообщения = Ложь, Знач РежимТестирования = Ложь) Экспорт

	#region initialization

	мСтруктураПараметров = СтруктураПараметров;
	мВыводитьСообщения = Истина;
	мРежимТестирования = РежимТестирования;
	мНачалоПериода = _НачалоПериода;
	мКонецПериода = _КонецПериода;

	#endregion

	#region calculation_dispatch
	
	Выполнить("ВычислитьПоказатель_стр"+НомерСтроки+"кол"+НомерКолонки+"()");

	#endregion

	#region result_formation

	Возврат мЗначениеПоказателя;

	#endregion

КонецФункции

Функция ВычислитьПоказатель_стр99кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;
	МассивСчетов = Новый Массив;

	#endregion

	#region accounts_initialization
	
	КодыСчетов = новый Массив;
	КодыСчетов.Добавить("71511");
	КодыСчетов.Добавить("71512");
	КодыСчетов.Добавить("72511");
	КодыСчетов.Добавить("72512");
	
	СимволыОФР=Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	
	т=СимволыОФР.Добавить();т.код="37101";
	т=СимволыОФР.Добавить();т.код="37102";
	т=СимволыОФР.Добавить();т.код="37103";
	т=СимволыОФР.Добавить();т.код="37104";
	т=СимволыОФР.Добавить();т.код="37105";
	т=СимволыОФР.Добавить();т.код="37106";
	т=СимволыОФР.Добавить();т.код="47101";
	т=СимволыОФР.Добавить();т.код="47102";
	т=СимволыОФР.Добавить();т.код="47103";
	т=СимволыОФР.Добавить();т.код="47104";
	т=СимволыОФР.Добавить();т.код="47105";
	т=СимволыОФР.Добавить();т.код="47106";
	
	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл
		
		Для Каждого СчетКод Из КодыСчетов Цикл
			
			КодСчета = СчетКод+"."+стркОФР.Код ;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков,
					Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
			
			Иначе
				сообщить("не найден счет: "+строка(КодСчета));
		
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 99 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation
	
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

Функция ВычислитьПоказатель_стр99кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр99кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Сервисные сборы" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символ ОФР: 16101
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр1кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "16101";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 1 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Сервисные сборы" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр1кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр1кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по листингу" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символы ОФР: 16102, 16103, 16104, 16105
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр2кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "16102";
	т = СимволыОФР.Добавить(); т.Код = "16103";
	т = СимволыОФР.Добавить(); т.Код = "16104";
	т = СимволыОФР.Добавить(); т.Код = "16105";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 2 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по листингу" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр2кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр2кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на фондовом рынке" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71601, 72601; Символ ОФР: 16201
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр3кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71601");
	КодыСчетов.Добавить("72601");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "16201";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 3 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на фондовом рынке" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр3кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр3кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на валютном рынке" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71601, 72601; Символ ОФР: 16202
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр4кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71601");
	КодыСчетов.Добавить("72601");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "16202";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 4 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на валютном рынке" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр4кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр4кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на срочном рынке" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71601, 72601; Символ ОФР: 16203
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр5кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71601");
	КодыСчетов.Добавить("72601");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "16203";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 5 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на срочном рынке" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр5кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр5кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на товарном рынке" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71601, 72601; Символ ОФР: 16204
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр6кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71601");
	КодыСчетов.Добавить("72601");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "16204";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 6 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Комиссионные доходы по организации торгов на товарном рынке" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр6кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр6кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по ведению реестра владельцев ценных бумаг" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символы ОФР: 12101, 12102, 12103, 12104
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр8кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "12101";
	т = СимволыОФР.Добавить(); т.Код = "12102";
	т = СимволыОФР.Добавить(); т.Код = "12103";
	т = СимволыОФР.Добавить(); т.Код = "12104";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 8 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по ведению реестра владельцев ценных бумаг" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр8кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр8кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг зарегистрированным лицам" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символы ОФР: 12201, 12202, 12203, 12204, 12205
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр9кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "12201";
	т = СимволыОФР.Добавить(); т.Код = "12202";
	т = СимволыОФР.Добавить(); т.Код = "12203";
	т = СимволыОФР.Добавить(); т.Код = "12204";
	т = СимволыОФР.Добавить(); т.Код = "12205";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 9 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг зарегистрированным лицам" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр9кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр9кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от приема-передачи системы ведения реестра" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символ ОФР: 12301
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр10кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "12301";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 10 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от приема-передачи системы ведения реестра" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр10кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр10кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по участию в общих собраниях акционеров" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символ ОФР: 12302
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр11кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "12302";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 11 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по участию в общих собраниях акционеров" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр11кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр11кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг, связанных с корпоративными действиями эмитента" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символ ОФР: 12305
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр12кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "12305";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 12 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг, связанных с корпоративными действиями эмитента" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр12кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр12кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по подготовке выпусков ценных бумаг" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символ ОФР: 12303
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр13кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "12303";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 13 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по подготовке выпусков ценных бумаг" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр13кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр13кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по выплате доходов по ценным бумагам" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символ ОФР: 12304
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр14кол3(Знач ПериодОстатков = Неопределено)

	#region initialization

	ЗначениеПоказателя = 0;

	#endregion

	#region accounts_initialization

	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");

	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");

	т = СимволыОФР.Добавить(); т.Код = "12304";

	#endregion

	#region calculation

	Для Каждого стркОФР Из СимволыОФР Цикл

		Для Каждого СчетКод Из КодыСчетов Цикл

			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);

			Если ЗначениеЗаполнено(СчетСсылка) Тогда

				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;

				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив,
					ПериодОстатков, Ложь
				);

				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;

				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;

			Иначе

				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	#endregion

	#region logging

	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 14 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;

	#endregion

	#region result_formation

	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;

	#endregion

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг по выплате доходов по ценным бумагам" на конец предыдущего периода
// Возвращаемое: Число – Сумма оборотов по счетам
Функция ВычислитьПоказатель_стр14кол4()

	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр14кол3(КонецПрошлогоПериода);

КонецФункции

// Назначение: Вычисление показателя "Выручка от оказания услуг клирингового обслуживания на фондовом рынке" на конец текущего периода
// Параметры: ПериодОстатков – Дата – Дата для расчета остатка
// Возвращаемое: Число – Сумма оборотов по счетам
// Примечания: Счета: 71602, 72602; Символ ОФР: 17101
// Операции с БД: Запрос остатков по счетам через ОстатокПоСчету
Функция ВычислитьПоказатель_стр16кол3(Знач ПериодОстатков = Неопределено)

	#region initialization
	ЗначениеПоказателя = 0;
	#endregion

	#region accounts_initialization
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "17101";
	#endregion

	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;
			Иначе
				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion

	#region logging
	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 16 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;
	#endregion

	#region result_formation
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	#endregion

КонецФункции

Функция ВычислитьПоказатель_стр16кол4()
	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр16кол3(КонецПрошлогоПериода);
КонецФункции

Функция ВычислитьПоказатель_стр17кол3(Знач ПериодОстатков = Неопределено)
	#region initialization
	ЗначениеПоказателя = 0;
	#endregion
	#region accounts_initialization
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "17102";
	#endregion
	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;
			Иначе
				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion
	#region logging
	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 17 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;
	#endregion
	#region result_formation
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	#endregion
КонецФункции

Функция ВычислитьПоказатель_стр17кол4()
	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр17кол3(КонецПрошлогоПериода);
КонецФункции

Функция ВычислитьПоказатель_стр18кол3(Знач ПериодОстатков = Неопределено)
	#region initialization
	ЗначениеПоказателя = 0;
	#endregion
	#region accounts_initialization
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "17103";
	#endregion
	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;
			Иначе
				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion
	#region logging
	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 18 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;
	#endregion
	#region result_formation
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	#endregion
КонецФункции

Функция ВычислитьПоказатель_стр18кол4()
	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр18кол3(КонецПрошлогоПериода);
КонецФункции

Функция ВычислитьПоказатель_стр19кол3(Знач ПериодОстатков = Неопределено)
	#region initialization
	ЗначениеПоказателя = 0;
	#endregion
	#region accounts_initialization
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "17104";
	#endregion
	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;
			Иначе
				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion
	#region logging
	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 19 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;
	#endregion
	#region result_formation
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	#endregion
КонецФункции

Функция ВычислитьПоказатель_стр19кол4()
	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр19кол3(КонецПрошлогоПериода);
КонецФункции

Функция ВычислитьПоказатель_стр20кол3(Знач ПериодОстатков = Неопределено)
	#region initialization
	ЗначениеПоказателя = 0;
	#endregion
	#region accounts_initialization
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "17105";
	#endregion
	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;
			Иначе
				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion
	#region logging
	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 20 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;
	#endregion
	#region result_formation
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	#endregion
КонецФункции

Функция ВычислитьПоказатель_стр20кол4()
	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр20кол3(КонецПрошлогоПериода);
КонецФункции

Функция ВычислитьПоказатель_стр21кол3(Знач ПериодОстатков = Неопределено)
	#region initialization
	ЗначениеПоказателя = 0;
	#endregion
	#region accounts_initialization
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "17201";
	#endregion
	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда
					Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
				КонецЕсли;
			Иначе
				Если мВыводитьСообщения Тогда
					Сообщить("Не найден счет: " + Строка(КодСчета));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion
	#region logging
	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 21 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>");
	КонецЕсли;
	#endregion
	#region result_formation
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	#endregion
КонецФункции

Функция ВычислитьПоказатель_стр21кол4()
	КонецПрошлогоПериода = КонецПредыдущегоПериода();
	Возврат ВычислитьПоказатель_стр21кол3(КонецПрошлогоПериода);
КонецФункции

Функция ВычислитьПоказатель_стр23кол3(Знач ПериодОстатков = Неопределено)
	#region initialization
	ЗначениеПоказателя = 0;
	#endregion
	#region accounts_initialization
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "14101";
	т = СимволыОФР.Добавить(); т.Код = "14102";
	т = СимволыОФР.Добавить(); т.Код = "14103";
	т = СимволыОФР.Добавить(); т.Код = "14104";
	#endregion
	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код;
			СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
			Иначе
				Если мВыводитьСообщения Тогда Сообщить("Не найден счет: " + Строка(КодСчета)); КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion
	#region logging
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 23 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
	#endregion
	#region result_formation
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
	#endregion
КонецФункции

Функция ВычислитьПоказатель_стр23кол4()
	Возврат ВычислитьПоказатель_стр23кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр24кол3(Знач ПериодОстатков = Неопределено)
	#region initialization
	ЗначениеПоказателя = 0;
	#endregion
	#region accounts_initialization
	КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "14201";
	т = СимволыОФР.Добавить(); т.Код = "14202";
	т = СимволыОФР.Добавить(); т.Код = "14203";
	т = СимволыОФР.Добавить(); т.Код = "14301";
	т = СимволыОФР.Добавить(); т.Код = "14302";
	т = СимволыОФР.Добавить(); т.Код = "14303";
	т = СимволыОФР.Добавить(); т.Код = "14401";
	т = СимволыОФР.Добавить(); т.Код = "14402";
	т = СимволыОФР.Добавить(); т.Код = "14403";
	#endregion
	#region calculation
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			КодСчета = СчетКод + "." + стркОФР.Код; СчетСсылка = СчетПоКоду(КодСчета);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли;
				ЧастьПоказателя = ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
				ЗначениеПоказателя = ЗначениеПоказателя + ЧастьПоказателя;
				Если мВыводитьСообщения Тогда Сообщить("<data_summary>Счет: " + СчетСсылка.Код + ", Остаток: " + Формат(ЧастьПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	#endregion
	#region result_formation
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 24 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
	мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
	#endregion
КонецФункции

Функция ВычислитьПоказатель_стр24кол4()
	Возврат ВычислитьПоказатель_стр24кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр25кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "14601";
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли;
				ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 25 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
	мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции

Функция ВычислитьПоказатель_стр25кол4()
	Возврат ВычислитьПоказатель_стр25кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр26кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "14503";
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли;
				ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 26 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
	мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции

Функция ВычислитьПоказатель_стр26кол4()
	Возврат ВычислитьПоказатель_стр26кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр27кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "14504";
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли;
				ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 27 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
	мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции

Функция ВычислитьПоказатель_стр27кол4()
	Возврат ВычислитьПоказатель_стр27кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр28кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "14501";
	т = СимволыОФР.Добавить(); т.Код = "14502";
	т = СимволыОФР.Добавить(); т.Код = "14505";
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли;
				ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 28 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли;
	мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции

Функция ВычислитьПоказатель_стр28кол4()
	Возврат ВычислитьПоказатель_стр28кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр30кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "11101";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 30 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции

Функция ВычислитьПоказатель_стр30кол4()
	Возврат ВычислитьПоказатель_стр30кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр31кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "11102";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 31 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр31кол4()
	Возврат ВычислитьПоказатель_стр31кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр32кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "11103";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 32 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр32кол4()
	Возврат ВычислитьПоказатель_стр32кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр33кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "11104";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 33 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр33кол4()
	Возврат ВычислитьПоказатель_стр33кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр34кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "11105";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 34 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр34кол4()
	Возврат ВычислитьПоказатель_стр34кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр35кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "11106";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 35 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр35кол4()
	Возврат ВычислитьПоказатель_стр35кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр36кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "11107";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 36 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр36кол4()
	Возврат ВычислитьПоказатель_стр36кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр38кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "15101"; т = СимволыОФР.Добавить(); т.Код = "15102"; т = СимволыОФР.Добавить(); т.Код = "15103"; т = СимволыОФР.Добавить(); т.Код = "15104"; т = СимволыОФР.Добавить(); т.Код = "15105"; т = СимволыОФР.Добавить(); т.Код = "15106"; т = СимволыОФР.Добавить(); т.Код = "15107"; т = СимволыОФР.Добавить(); т.Код = "15108"; т = СимволыОФР.Добавить(); т.Код = "15109"; т = СимволыОФР.Добавить(); т.Код = "15110"; т = СимволыОФР.Добавить(); т.Код = "15111"; т = СимволыОФР.Добавить(); т.Код = "15112";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 38 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр38кол4()
	Возврат ВычислитьПоказатель_стр38кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр39кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "13101"; т = СимволыОФР.Добавить(); т.Код = "13102"; т = СимволыОФР.Добавить(); т.Код = "13103"; т = СимволыОФР.Добавить(); т.Код = "13104"; т = СимволыОФР.Добавить(); т.Код = "13105"; т = СимволыОФР.Добавить(); т.Код = "13106"; т = СимволыОФР.Добавить(); т.Код = "13107"; т = СимволыОФР.Добавить(); т.Код = "13108"; т = СимволыОФР.Добавить(); т.Код = "13109"; т = СимволыОФР.Добавить(); т.Код = "13110"; т = СимволыОФР.Добавить(); т.Код = "13111"; т = СимволыОФР.Добавить(); т.Код = "13112"; т = СимволыОФР.Добавить(); т.Код = "13113";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 39 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр39кол4()
	Возврат ВычислитьПоказатель_стр39кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр40кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "18101"; т = СимволыОФР.Добавить(); т.Код = "18102";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 40 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр40кол4()
	Возврат ВычислитьПоказатель_стр40кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр41кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "18201"; т = СимволыОФР.Добавить(); т.Код = "18202"; т = СимволыОФР.Добавить(); т.Код = "18203"; т = СимволыОФР.Добавить(); т.Код = "18204"; т = СимволыОФР.Добавить(); т.Код = "18205"; т = СимволыОФР.Добавить(); т.Код = "18206";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 41 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр41кол4()
	Возврат ВычислитьПоказатель_стр41кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр42кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "18302";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 42 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр42кол4()
	Возврат ВычислитьПоказатель_стр42кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр43кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "18401"; т = СимволыОФР.Добавить(); т.Код = "18402"; т = СимволыОФР.Добавить(); т.Код = "18403"; т = СимволыОФР.Добавить(); т.Код = "18404"; т = СимволыОФР.Добавить(); т.Код = "18405"; т = СимволыОФР.Добавить(); т.Код = "18406"; т = СимволыОФР.Добавить(); т.Код = "18407"; т = СимволыОФР.Добавить(); т.Код = "18408";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 43 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр43кол4()
	Возврат ВычислитьПоказатель_стр43кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр44кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "18501"; т = СимволыОФР.Добавить(); т.Код = "18502"; т = СимволыОФР.Добавить(); т.Код = "18503"; т = СимволыОФР.Добавить(); т.Код = "18504";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 44 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр44кол4()
	Возврат ВычислитьПоказатель_стр44кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр45кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "18601"; т = СимволыОФР.Добавить(); т.Код = "18602"; т = СимволыОФР.Добавить(); т.Код = "18603"; т = СимволыОФР.Добавить(); т.Код = "18604";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 45 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр45кол4()
	Возврат ВычислитьПоказатель_стр45кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр47кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71601"); КодыСчетов.Добавить("72601"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "19101";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 47 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр47кол4()
	Возврат ВычислитьПоказатель_стр47кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр48кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "19103";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 48 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр48кол4()
	Возврат ВычислитьПоказатель_стр48кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр49кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "19104";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 49 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр49кол4()
	Возврат ВычислитьПоказатель_стр49кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр50кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "19105";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 50 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр50кол4()
	Возврат ВычислитьПоказатель_стр50кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр51кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0; КодыСчетов = Новый Массив; КодыСчетов.Добавить("71602"); КодыСчетов.Добавить("72602"); СимволыОФР = Новый ТаблицаЗначений; СимволыОФР.Колонки.Добавить("Код"); т = СимволыОФР.Добавить(); т.Код = "19102";
	Для Каждого стркОФР Из СимволыОФР Цикл Для Каждого СчетКод Из КодыСчетов Цикл СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код); Если ЗначениеЗаполнено(СчетСсылка) Тогда Если ПериодОстатков = Неопределено Тогда ПериодОстатков = мКонецПериода; КонецЕсли; ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь); КонецЕсли; КонецЦикла; КонецЦикла;
	Если мВыводитьСообщения Тогда Сообщить("<data_summary>Итого стр 51 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); КонецЕсли; мЗначениеПоказателя = ЗначениеПоказателя; Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр51кол4()
	Возврат ВычислитьПоказатель_стр51кол3(КонецПредыдущегоПериода());
КонецФункции

Функция ВычислитьПоказатель_стр52кол3(Знач ПериодОстатков = Неопределено)
	ЗначениеПоказателя = 0;
	КодыСчетов = Новый Массив;
	КодыСчетов.Добавить("71602");
	КодыСчетов.Добавить("72602");
	СимволыОФР = Новый ТаблицаЗначений;
	СимволыОФР.Колонки.Добавить("Код");
	т = СимволыОФР.Добавить(); т.Код = "19106";
	Для Каждого стркОФР Из СимволыОФР Цикл
		Для Каждого СчетКод Из КодыСчетов Цикл
			СчетСсылка = СчетПоКоду(СчетКод + "." + стркОФР.Код);
			Если ЗначениеЗаполнено(СчетСсылка) Тогда
				Если ПериодОстатков = Неопределено Тогда
					ПериодОстатков = мКонецПериода;
				КонецЕсли;
				ЗначениеПоказателя = ЗначениеПоказателя + ОстатокПоСчету(мСтруктураПараметров.Организация, СчетСсылка, Новый Массив, ПериодОстатков, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если мВыводитьСообщения Тогда
		Сообщить("<data_summary>Итого стр 52 кол 3: " + Формат(ЗначениеПоказателя, "ЧРД=.; ЧГ=0") + "</data_summary>"); 
	КонецЕсли;
	мЗначениеПоказателя = ЗначениеПоказателя;
	Возврат ЗначениеПоказателя;
КонецФункции
Функция ВычислитьПоказатель_стр52кол4()
	Возврат ВычислитьПоказатель_стр52кол3(КонецПредыдущегоПериода());
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Назначение: Получение остатка по счету с учетом субконто
// Параметры: Организация – СправочникСсылка – Ссылка на организацию;
//            СчетСсылка – ПланСчетовСсылка.Хозрасчетный – Счет бухгалтерии;
//            МассивСсылок – Массив – Массив ссылок на субконто;
//            ДатаОстатка – Дата – Дата для расчета остатка;
//            ЭтоОстатокНаНачало – Булево – Флаг вида остатка
// Возвращаемое: Число – Сумма остатка
Функция ОстатокПоСчету(Организация, СчетСсылка, МассивСсылок, ДатаОстатка, ЭтоОстатокНаНачало = Истина) Экспорт

	#region initialization

	Если ЭтоОстатокНаНачало = Истина Тогда

		Граница = Новый Граница(НачалоДня(ДатаОстатка), ВидГраницы.Исключая);

	ИначеЕсли ЭтоОстатокНаНачало = Ложь Тогда

		Граница = Новый Граница(КонецДня(ДатаОстатка), ВидГраницы.Включая);

	КонецЕсли;

	#endregion

	#region database_query

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаОстатокДт,
		|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) КАК ВалютнаяСуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатка,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И &УсловиеНаСубконто) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если МассивСсылок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
	Иначе
		
		Если МассивСсылок.Количество() > 0 Тогда
		
			Запрос.УстановитьПараметр("Субконто1", МассивСсылок);
		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "Субконто1 В (&Субконто1)");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСубконто", "1=1");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", СчетСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	#endregion

	#region loop_processing

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат -1*ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	#endregion
	
	#region result_formation
	
	Возврат 0;
	
	#endregion
              
КонецФункции

// Назначение: Вычисление конца предыдущего периода с учетом високосных лет
// Возвращаемое: Дата – Конец предыдущего периода
Функция КонецПредыдущегоПериода()
	
	#region calculation
	
	_КонецПериода = ДобавитьМесяц(мКонецПериода, -12);
	Если КонецДня(мКонецПериода) = КонецМесяца(мКонецПериода) И Месяц(_КонецПериода) = 2 Тогда
		Если ОбщегоНазначенияБЗККлиентСервер.ЭтоВисокосныйГод(_КонецПериода) Тогда
			_КонецПериода = КонецМесяца(_КонецПериода);
		КонецЕсли;
	КонецЕсли;
	
	#endregion
	
	Возврат _КонецПериода;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СчетПоКоду(Код)
	
	сч = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Код);
	Если НЕ ЗначениеЗаполнено(сч) или сч = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		сообщить("Не найден счет по коду "+строка(Код));
	Иначе
		Возврат сч;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

мВыводитьСообщения = истина;

